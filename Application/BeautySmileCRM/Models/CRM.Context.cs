//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BeautySmileCRM.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using BeautySmileCRM.Services;
    
    public partial class CRMContext : DbContext
    {
    
    	public CRMContext()
            : base(UserProfileService.ConnectionString)
        {		
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new Exception("Code first changes are not allowed."); 
        }
    
        public virtual DbSet<Privilege> Privileges { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<AppointmentState> AppointmentStates { get; set; }
        public virtual DbSet<CumulativeDiscount> CumulativeDiscounts { get; set; }
        public virtual DbSet<DiscountType> DiscountTypes { get; set; }
        public virtual DbSet<PrivelegeGroup> PrivelegeGroups { get; set; }
        public virtual DbSet<TransactionType> TransactionTypes { get; set; }
        public virtual DbSet<Appointment> Appointments { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<DiscountCard> DiscountCards { get; set; }
        public virtual DbSet<FinancialTransaction> FinancialTransactions { get; set; }
        public virtual DbSet<Staff> Staffs { get; set; }
        public virtual DbSet<AppointmentView> AppointmentView { get; set; }
        public virtual DbSet<CustomerView> CustomerView { get; set; }
        public virtual DbSet<FinancialTransactionView> FinancialTransactionView { get; set; }
        public virtual DbSet<DBVersion> DBVersions { get; set; }
        public virtual DbSet<Service> Services { get; set; }
        public virtual DbSet<AppointmentDetail> AppointmentDetails { get; set; }
    
        public virtual int CreateFinancialTransaction(Nullable<int> userID, Nullable<int> transactionTypeID, Nullable<int> customerID, Nullable<int> appointmentID, Nullable<decimal> amount, string comment)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var transactionTypeIDParameter = transactionTypeID.HasValue ?
                new ObjectParameter("transactionTypeID", transactionTypeID) :
                new ObjectParameter("transactionTypeID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(int));
    
            var appointmentIDParameter = appointmentID.HasValue ?
                new ObjectParameter("appointmentID", appointmentID) :
                new ObjectParameter("appointmentID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var commentParameter = comment != null ?
                new ObjectParameter("comment", comment) :
                new ObjectParameter("comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateFinancialTransaction", userIDParameter, transactionTypeIDParameter, customerIDParameter, appointmentIDParameter, amountParameter, commentParameter);
        }
    
        public virtual ObjectResult<CustomerDashboardData> GetCustomerDashboardData(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerDashboardData>("GetCustomerDashboardData", dateParameter);
        }
    
        public virtual int DeleteFinancialTransaction(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteFinancialTransaction", idParameter);
        }
    
        public virtual int UpdateFinancialTransaction(Nullable<int> id, Nullable<int> userID, Nullable<int> transactionTypeID, Nullable<int> customerID, Nullable<int> appointmentID, Nullable<decimal> amount, string comment)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var transactionTypeIDParameter = transactionTypeID.HasValue ?
                new ObjectParameter("transactionTypeID", transactionTypeID) :
                new ObjectParameter("transactionTypeID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(int));
    
            var appointmentIDParameter = appointmentID.HasValue ?
                new ObjectParameter("appointmentID", appointmentID) :
                new ObjectParameter("appointmentID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var commentParameter = comment != null ?
                new ObjectParameter("comment", comment) :
                new ObjectParameter("comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateFinancialTransaction", idParameter, userIDParameter, transactionTypeIDParameter, customerIDParameter, appointmentIDParameter, amountParameter, commentParameter);
        }
    
        public virtual ObjectResult<DiscountCard> RecalculateDiscount(Nullable<int> discountCardID)
        {
            var discountCardIDParameter = discountCardID.HasValue ?
                new ObjectParameter("discountCardID", discountCardID) :
                new ObjectParameter("discountCardID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DiscountCard>("RecalculateDiscount", discountCardIDParameter);
        }
    
        public virtual ObjectResult<DiscountCard> RecalculateDiscount(Nullable<int> discountCardID, MergeOption mergeOption)
        {
            var discountCardIDParameter = discountCardID.HasValue ?
                new ObjectParameter("discountCardID", discountCardID) :
                new ObjectParameter("discountCardID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DiscountCard>("RecalculateDiscount", mergeOption, discountCardIDParameter);
        }
    }
}
