<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="v_1_0_0_0" xml:space="preserve">
    <value>SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;
GO

USE [master];
GO

IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'CRM')
    BEGIN
        ALTER DATABASE [CRM]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [CRM]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'CRM')
    BEGIN
        ALTER DATABASE [CRM]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'CRM')
    BEGIN
        ALTER DATABASE [CRM]
            SET READ_COMMITTED_SNAPSHOT OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'CRM')
    BEGIN
        ALTER DATABASE [CRM]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'CRM')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [CRM]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'CRM')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [CRM]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [CRM]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'CRM')
    BEGIN
        ALTER DATABASE [CRM]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [CRM];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [AppUser]...';


GO
if(not exists(select 1 
            from master.dbo.syslogins 
           where name = 'AppUser'))
begin 
	CREATE LOGIN [AppUser]
		WITH PASSWORD = N'&lt;fj,f,2014', DEFAULT_LANGUAGE = [us_english], CHECK_POLICY = OFF;
end
go		


GO
PRINT N'Creating [AppUser]...';


GO
CREATE USER [AppUser] FOR LOGIN [AppUser];


GO
PRINT N'Creating &lt;unnamed&gt;...';


GO
EXECUTE sp_addrolemember @rolename = N'db_datareader', @membername = N'AppUser';


GO
PRINT N'Creating &lt;unnamed&gt;...';


GO
EXECUTE sp_addrolemember @rolename = N'db_datawriter', @membername = N'AppUser';


GO
PRINT N'Creating [APP]...';


GO
CREATE SCHEMA [APP]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [CONF]...';


GO
CREATE SCHEMA [CONF]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [CST]...';


GO
CREATE SCHEMA [CST]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [STF]...';


GO
CREATE SCHEMA [STF]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [ADM]...';


GO
CREATE SCHEMA [ADM]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [CONF].[DiscountType]...';


GO
CREATE TABLE [CONF].[DiscountType] (
    [ID]          INT             NOT NULL,
    [Code]        VARCHAR (255)   NOT NULL,
    [Name]        NVARCHAR (255)  NOT NULL,
    [Description] NVARCHAR (4000) NULL,
    CONSTRAINT [PK#DiscountType] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [CONF].[PrivelegeGroup]...';


GO
CREATE TABLE [CONF].[PrivelegeGroup] (
    [ID]          INT             NOT NULL,
    [Code]        VARCHAR (50)    NOT NULL,
    [Name]        NVARCHAR (255)  NOT NULL,
    [Description] NVARCHAR (4000) NULL,
    CONSTRAINT [PK#PrivelegeGroup] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [CONF].[TransactionType]...';


GO
CREATE TABLE [CONF].[TransactionType] (
    [ID]            INT             IDENTITY (1, 1) NOT NULL,
    [Code]          VARCHAR (50)    NOT NULL,
    [Name]          NVARCHAR (255)  NOT NULL,
    [Description]   NVARCHAR (4000) NULL,
    [OperationSign] INT             NOT NULL,
    CONSTRAINT [PK#TransactionType] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [CONF].[AppointmentState]...';


GO
CREATE TABLE [CONF].[AppointmentState] (
    [ID]          INT             NOT NULL,
    [Code]        VARCHAR (50)    NOT NULL,
    [Name]        NVARCHAR (255)  NOT NULL,
    [Description] NVARCHAR (4000) NULL,
    CONSTRAINT [PK#AppointmentState] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [CONF].[CumulativeDiscount]...';


GO
CREATE TABLE [CONF].[CumulativeDiscount] (
    [ID]               INT             IDENTITY (1, 1) NOT NULL,
    [Name]             NVARCHAR (255)  NOT NULL,
    [Percent]          DECIMAL (4, 2)  NOT NULL,
    [MinDiscount]      DECIMAL (13, 2) NOT NULL,
    [MaxDiscount]      DECIMAL (13, 2) NOT NULL,
    [PurchaseTopLimit] DECIMAL (13, 2) NOT NULL,
    CONSTRAINT [PK#CumulativeDiscount] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UK#CumulativeDiscount@Name] UNIQUE NONCLUSTERED ([Name] ASC)
);


GO
PRINT N'Creating [CST].[Appointment]...';


GO
CREATE TABLE [CST].[Appointment] (
    [ID]               INT             IDENTITY (1, 1) NOT NULL,
    [CustomerID]       INT             NOT NULL,
    [StartTime]        DATETIME        NOT NULL,
    [EndTime]          DATETIME        NOT NULL,
    [StaffID]          INT             NOT NULL,
    [Purpose]          NVARCHAR (4000) NOT NULL,
    [Price]            DECIMAL (13, 2) NOT NULL,
    [DiscountPercent]  DECIMAL (4, 2)  NOT NULL,
    [Discount]         DECIMAL (13, 2) NOT NULL,
    [ToPay]            DECIMAL (13, 2) NOT NULL,
    [StateID]          INT             NOT NULL,
    [CreationTime]     DATETIME        NOT NULL,
    [CreatedBy]        INT             NOT NULL,
    [ModificationTime] DATETIME        NULL,
    [ModifiedBy]       INT             NULL,
    CONSTRAINT [PK#Appointment] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [CST].[Appointment].[I#Appointment@StaffID@StateID]...';


GO
CREATE NONCLUSTERED INDEX [I#Appointment@StaffID@StateID]
    ON [CST].[Appointment]([StaffID] ASC, [StateID] ASC);


GO
PRINT N'Creating [CST].[Appointment].[I#Appointment@StartTime@StateID]...';


GO
CREATE NONCLUSTERED INDEX [I#Appointment@StartTime@StateID]
    ON [CST].[Appointment]([StartTime] ASC, [StateID] ASC);


GO
PRINT N'Creating [CST].[Appointment].[I#Appointment@CustomerID@StateID]...';


GO
CREATE NONCLUSTERED INDEX [I#Appointment@CustomerID@StateID]
    ON [CST].[Appointment]([CustomerID] ASC, [StateID] ASC);


GO
PRINT N'Creating [CST].[Customer]...';


GO
CREATE TABLE [CST].[Customer] (
    [ID]               INT             IDENTITY (1, 1) NOT NULL,
    [FirstName]        NVARCHAR (100)  NOT NULL,
    [LastName]         NVARCHAR (100)  NOT NULL,
    [MiddleName]       NVARCHAR (100)  NULL,
    [Phone]            VARCHAR (18)    NULL,
    [Email]            VARCHAR (255)   NULL,
    [Address]          NVARCHAR (4000) NULL,
    [BirthDate]        DATETIME2 (7)   NULL,
    [DiscountCardID]   INT             NULL,
    [UserID]           INT             NULL,
    [Photo]            IMAGE           NULL,
    [MoneyBalance]     DECIMAL (13, 2) NOT NULL,
    [MobilePhone]      VARCHAR (18)    NULL,
    [Gender]           INT             NOT NULL,
    [Country]          NVARCHAR (4000) NULL,
    [City]             NVARCHAR (4000) NULL,
    [Region]           NVARCHAR (4000) NULL,
    [Zip]              INT             NULL,
    [NotifyByEmail]    BIT             NOT NULL,
    [NotifyBySms]      BIT             NOT NULL,
    [NotifyByPost]     BIT             NOT NULL,
    [CreationTime]     DATETIME2 (7)   NOT NULL,
    [ModificationTime] DATETIME2 (7)   NULL,
    CONSTRAINT [PK#Customer] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [CST].[Customer].[IU#Customer@LastName@FirstName@BirthDate@MiddleName]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IU#Customer@LastName@FirstName@BirthDate@MiddleName]
    ON [CST].[Customer]([LastName] ASC, [FirstName] ASC, [BirthDate] ASC, [MiddleName] ASC);


GO
PRINT N'Creating [CST].[Customer].[IFK#Customer@DiscountCardID#DiscountCard@ID]...';


GO
CREATE NONCLUSTERED INDEX [IFK#Customer@DiscountCardID#DiscountCard@ID]
    ON [CST].[Customer]([DiscountCardID] ASC);


GO
PRINT N'Creating [CST].[Customer].[IFK#Customer@UserID#User@ID]...';


GO
CREATE NONCLUSTERED INDEX [IFK#Customer@UserID#User@ID]
    ON [CST].[Customer]([UserID] ASC);


GO
PRINT N'Creating [CST].[DiscountCard]...';


GO
CREATE TABLE [CST].[DiscountCard] (
    [ID]                 INT             IDENTITY (1, 1) NOT NULL,
    [Code]               VARCHAR (50)    NOT NULL,
    [DiscountPercent]    DECIMAL (4, 2)  NOT NULL,
    [TotalPurchaseValue] DECIMAL (13, 2) NOT NULL,
    [DiscountTypeID]     INT             NOT NULL,
    [MinDiscount]        DECIMAL (13, 2) NOT NULL,
    [MaxDiscount]        DECIMAL (13, 2) NOT NULL,
    CONSTRAINT [PK#DiscountCard] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [CST].[DiscountCard].[IFK#DiscountCard@DiscountTypeID#DiscountTYpe@ID]...';


GO
CREATE NONCLUSTERED INDEX [IFK#DiscountCard@DiscountTypeID#DiscountTYpe@ID]
    ON [CST].[DiscountCard]([DiscountTypeID] ASC);


GO
PRINT N'Creating [CST].[DiscountCard].[IU#DiscountCard@Code]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IU#DiscountCard@Code]
    ON [CST].[DiscountCard]([Code] ASC);


GO
PRINT N'Creating [CST].[FinancialTransaction]...';


GO
CREATE TABLE [CST].[FinancialTransaction] (
    [ID]                INT             IDENTITY (1, 1) NOT NULL,
    [CustomerID]        INT             NOT NULL,
    [AppointmentID]     INT             NOT NULL,
    [TransactionTypeID] INT             NOT NULL,
    [Amount]            DECIMAL (13, 2) NOT NULL,
    [Comment]           NVARCHAR (4000) NULL,
    [CreationTime]      DATETIME        NOT NULL,
    [CreatedBy]         INT             NOT NULL,
    [ModificationTime]  DATETIME        NULL,
    [ModifiedBy]        INT             NULL,
    [IsCanceled]        BIT             NOT NULL,
    CONSTRAINT [PK#FinancialTransaction] PRIMARY KEY NONCLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [CST].[FinancialTransaction].[IFK#FinancialTransaction@CustomerID#Customer@ID]...';


GO
CREATE NONCLUSTERED INDEX [IFK#FinancialTransaction@CustomerID#Customer@ID]
    ON [CST].[FinancialTransaction]([CustomerID] ASC);


GO
PRINT N'Creating [CST].[FinancialTransaction].[IFK#FinancialTransaction@TransactionTypeID#TransactionType@ID]...';


GO
CREATE NONCLUSTERED INDEX [IFK#FinancialTransaction@TransactionTypeID#TransactionType@ID]
    ON [CST].[FinancialTransaction]([TransactionTypeID] ASC);


GO
PRINT N'Creating [CST].[FinancialTransaction].[IFK#FinancialTransaction@CreatedBy#User@ID]...';


GO
CREATE NONCLUSTERED INDEX [IFK#FinancialTransaction@CreatedBy#User@ID]
    ON [CST].[FinancialTransaction]([CreatedBy] ASC);


GO
PRINT N'Creating [CST].[FinancialTransaction].[IFK#FinancialTransaction@ModifiedBy#User@ID]...';


GO
CREATE NONCLUSTERED INDEX [IFK#FinancialTransaction@ModifiedBy#User@ID]
    ON [CST].[FinancialTransaction]([ModifiedBy] ASC);


GO
PRINT N'Creating [CST].[FinancialTransaction].[IFK#FinancialTransaction@AppointmentID#Appointment@iD]...';


GO
CREATE NONCLUSTERED INDEX [IFK#FinancialTransaction@AppointmentID#Appointment@iD]
    ON [CST].[FinancialTransaction]([AppointmentID] ASC);


GO
PRINT N'Creating [STF].[Staff]...';


GO
CREATE TABLE [STF].[Staff] (
    [ID]            INT             IDENTITY (1, 1) NOT NULL,
    [FirstName]     NVARCHAR (100)  NOT NULL,
    [LastName]      NVARCHAR (100)  NOT NULL,
    [MiddleName]    NVARCHAR (100)  NULL,
    [Photo]         IMAGE           NULL,
    [DismissalDate] DATE            NULL,
    [UserID]        INT             NULL,
    [Position]      NVARCHAR (4000) NOT NULL,
    CONSTRAINT [PK#Staff] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [STF].[Staff].[IU#Staff@LastName@FirstName@MiddleName@DismissalDate]...';


GO
CREATE NONCLUSTERED INDEX [IU#Staff@LastName@FirstName@MiddleName@DismissalDate]
    ON [STF].[Staff]([LastName] ASC, [FirstName] ASC, [MiddleName] ASC, [DismissalDate] ASC);


GO
PRINT N'Creating [STF].[Staff].[IFK#Staff@UserID#User@ID]...';


GO
CREATE NONCLUSTERED INDEX [IFK#Staff@UserID#User@ID]
    ON [STF].[Staff]([UserID] ASC);


GO
PRINT N'Creating [ADM].[Privilege]...';


GO
CREATE TABLE [ADM].[Privilege] (
    [ID]          INT            NOT NULL,
    [Name]        NVARCHAR (256) NOT NULL,
    [Description] NVARCHAR (256) NOT NULL,
    [GroupID]     INT            NOT NULL,
    CONSTRAINT [PK#Privilege] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [ADM].[Privilege].[IFK#Privilege@GroupID#PrivelegeGroup@ID]...';


GO
CREATE NONCLUSTERED INDEX [IFK#Privilege@GroupID#PrivelegeGroup@ID]
    ON [ADM].[Privilege]([GroupID] ASC);


GO
PRINT N'Creating [ADM].[User]...';


GO
CREATE TABLE [ADM].[User] (
    [ID]             INT            IDENTITY (1, 1) NOT NULL,
    [Login]          NVARCHAR (100) NOT NULL,
    [Password]       NVARCHAR (100) NOT NULL,
    [Email]          NVARCHAR (255) NULL,
    [ExpirationDate] DATE           NULL,
    [IsSystem]       BIT            NOT NULL,
    CONSTRAINT [PK#User] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [ADM].[User].[IU#User@Login@Password]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IU#User@Login@Password]
    ON [ADM].[User]([Login] ASC, [Password] ASC);


GO
PRINT N'Creating [ADM].[UserPrivilege]...';


GO
CREATE TABLE [ADM].[UserPrivilege] (
    [UserID]      INT NOT NULL,
    [PrivilegeID] INT NOT NULL,
    CONSTRAINT [PK#UserPrivilege] PRIMARY KEY CLUSTERED ([PrivilegeID] ASC, [UserID] ASC)
);


GO
PRINT N'Creating Default Constraint on [CONF].[TransactionType]....';


GO
ALTER TABLE [CONF].[TransactionType]
    ADD DEFAULT ((1)) FOR [OperationSign];


GO
PRINT N'Creating Default Constraint on [CST].[Appointment]....';


GO
ALTER TABLE [CST].[Appointment]
    ADD DEFAULT ((0)) FOR [DiscountPercent];


GO
PRINT N'Creating Default Constraint on [CST].[Appointment]....';


GO
ALTER TABLE [CST].[Appointment]
    ADD DEFAULT ((0)) FOR [Discount];


GO
PRINT N'Creating Default Constraint on [CST].[Appointment]....';


GO
ALTER TABLE [CST].[Appointment]
    ADD DEFAULT ((1)) FOR [StateID];


GO
PRINT N'Creating Default Constraint on [CST].[Customer]....';


GO
ALTER TABLE [CST].[Customer]
    ADD DEFAULT ((0)) FOR [MoneyBalance];


GO
PRINT N'Creating Default Constraint on [CST].[Customer]....';


GO
ALTER TABLE [CST].[Customer]
    ADD DEFAULT ((1)) FOR [Gender];


GO
PRINT N'Creating Default Constraint on [CST].[Customer]....';


GO
ALTER TABLE [CST].[Customer]
    ADD DEFAULT ((0)) FOR [NotifyByEmail];


GO
PRINT N'Creating Default Constraint on [CST].[Customer]....';


GO
ALTER TABLE [CST].[Customer]
    ADD DEFAULT ((0)) FOR [NotifyBySms];


GO
PRINT N'Creating Default Constraint on [CST].[Customer]....';


GO
ALTER TABLE [CST].[Customer]
    ADD DEFAULT ((0)) FOR [NotifyByPost];


GO
PRINT N'Creating Default Constraint on [CST].[Customer]....';


GO
ALTER TABLE [CST].[Customer]
    ADD DEFAULT (getdate()) FOR [CreationTime];


GO
PRINT N'Creating Default Constraint on [CST].[DiscountCard]....';


GO
ALTER TABLE [CST].[DiscountCard]
    ADD DEFAULT ((0)) FOR [DiscountPercent];


GO
PRINT N'Creating Default Constraint on [CST].[DiscountCard]....';


GO
ALTER TABLE [CST].[DiscountCard]
    ADD DEFAULT ((0)) FOR [TotalPurchaseValue];


GO
PRINT N'Creating Default Constraint on [CST].[DiscountCard]....';


GO
ALTER TABLE [CST].[DiscountCard]
    ADD DEFAULT ((1)) FOR [DiscountTypeID];


GO
PRINT N'Creating Default Constraint on [CST].[DiscountCard]....';


GO
ALTER TABLE [CST].[DiscountCard]
    ADD DEFAULT ((0)) FOR [MinDiscount];


GO
PRINT N'Creating Default Constraint on [CST].[DiscountCard]....';


GO
ALTER TABLE [CST].[DiscountCard]
    ADD DEFAULT ((9999999)) FOR [MaxDiscount];


GO
PRINT N'Creating Default Constraint on [CST].[FinancialTransaction]....';


GO
ALTER TABLE [CST].[FinancialTransaction]
    ADD DEFAULT (getdate()) FOR [CreationTime];


GO
PRINT N'Creating Default Constraint on [CST].[FinancialTransaction]....';


GO
ALTER TABLE [CST].[FinancialTransaction]
    ADD DEFAULT ((0)) FOR [IsCanceled];


GO
PRINT N'Creating Default Constraint on [ADM].[Privilege]....';


GO
ALTER TABLE [ADM].[Privilege]
    ADD DEFAULT ((1)) FOR [GroupID];


GO
PRINT N'Creating Default Constraint on [ADM].[User]....';


GO
ALTER TABLE [ADM].[User]
    ADD DEFAULT ((0)) FOR [IsSystem];


GO
PRINT N'Creating FK#Appointment@CreatedBy#User@ID...';


GO
ALTER TABLE [CST].[Appointment]
    ADD CONSTRAINT [FK#Appointment@CreatedBy#User@ID] FOREIGN KEY ([CreatedBy]) REFERENCES [ADM].[User] ([ID]);


GO
PRINT N'Creating FK#Appointment@CustomerID#Customer@ID...';


GO
ALTER TABLE [CST].[Appointment]
    ADD CONSTRAINT [FK#Appointment@CustomerID#Customer@ID] FOREIGN KEY ([CustomerID]) REFERENCES [CST].[Customer] ([ID]);


GO
PRINT N'Creating FK#Appointment@ModfiedBy#User@ID...';


GO
ALTER TABLE [CST].[Appointment]
    ADD CONSTRAINT [FK#Appointment@ModfiedBy#User@ID] FOREIGN KEY ([ModifiedBy]) REFERENCES [ADM].[User] ([ID]);


GO
PRINT N'Creating FK#Appointment@StaffID#Staff@ID...';


GO
ALTER TABLE [CST].[Appointment]
    ADD CONSTRAINT [FK#Appointment@StaffID#Staff@ID] FOREIGN KEY ([StaffID]) REFERENCES [STF].[Staff] ([ID]);


GO
PRINT N'Creating FK#Appointment@StateID#AppointmentState@ID...';


GO
ALTER TABLE [CST].[Appointment]
    ADD CONSTRAINT [FK#Appointment@StateID#AppointmentState@ID] FOREIGN KEY ([StateID]) REFERENCES [CONF].[AppointmentState] ([ID]);


GO
PRINT N'Creating FK#Customer@DiscountCardID#DiscountCard@ID...';


GO
ALTER TABLE [CST].[Customer]
    ADD CONSTRAINT [FK#Customer@DiscountCardID#DiscountCard@ID] FOREIGN KEY ([DiscountCardID]) REFERENCES [CST].[DiscountCard] ([ID]);


GO
PRINT N'Creating FK#Customer@UserID#User@ID...';


GO
ALTER TABLE [CST].[Customer]
    ADD CONSTRAINT [FK#Customer@UserID#User@ID] FOREIGN KEY ([UserID]) REFERENCES [ADM].[User] ([ID]);


GO
PRINT N'Creating FK#DiscountCard@DiscountTypeID#DiscountTYpe@ID...';


GO
ALTER TABLE [CST].[DiscountCard]
    ADD CONSTRAINT [FK#DiscountCard@DiscountTypeID#DiscountTYpe@ID] FOREIGN KEY ([DiscountTypeID]) REFERENCES [CONF].[DiscountType] ([ID]);


GO
PRINT N'Creating FK#FinancialTransaction@AppointmentID#Appointment@iD...';


GO
ALTER TABLE [CST].[FinancialTransaction]
    ADD CONSTRAINT [FK#FinancialTransaction@AppointmentID#Appointment@iD] FOREIGN KEY ([AppointmentID]) REFERENCES [CST].[Appointment] ([ID]);


GO
PRINT N'Creating FK#FinancialTransaction@CreatedBy#User@ID...';


GO
ALTER TABLE [CST].[FinancialTransaction]
    ADD CONSTRAINT [FK#FinancialTransaction@CreatedBy#User@ID] FOREIGN KEY ([CreatedBy]) REFERENCES [ADM].[User] ([ID]);


GO
PRINT N'Creating FK#FinancialTransaction@CustomerID#Customer@ID...';


GO
ALTER TABLE [CST].[FinancialTransaction]
    ADD CONSTRAINT [FK#FinancialTransaction@CustomerID#Customer@ID] FOREIGN KEY ([CustomerID]) REFERENCES [CST].[Customer] ([ID]);


GO
PRINT N'Creating FK#FinancialTransaction@ModifiedBy#User@ID...';


GO
ALTER TABLE [CST].[FinancialTransaction]
    ADD CONSTRAINT [FK#FinancialTransaction@ModifiedBy#User@ID] FOREIGN KEY ([ModifiedBy]) REFERENCES [ADM].[User] ([ID]);


GO
PRINT N'Creating FK#FinancialTransaction@TransactionTypeID#TransactionType@ID...';


GO
ALTER TABLE [CST].[FinancialTransaction]
    ADD CONSTRAINT [FK#FinancialTransaction@TransactionTypeID#TransactionType@ID] FOREIGN KEY ([TransactionTypeID]) REFERENCES [CONF].[TransactionType] ([ID]);


GO
PRINT N'Creating FK#Staff@UserID#User@ID...';


GO
ALTER TABLE [STF].[Staff]
    ADD CONSTRAINT [FK#Staff@UserID#User@ID] FOREIGN KEY ([UserID]) REFERENCES [ADM].[User] ([ID]);


GO
PRINT N'Creating FK#Privilege@GroupID#PrivelegeGroup@ID...';


GO
ALTER TABLE [ADM].[Privilege]
    ADD CONSTRAINT [FK#Privilege@GroupID#PrivelegeGroup@ID] FOREIGN KEY ([GroupID]) REFERENCES [CONF].[PrivelegeGroup] ([ID]);


GO
PRINT N'Creating FK#UserPrivilege@PrivelegeID#Privelege@ID...';


GO
ALTER TABLE [ADM].[UserPrivilege]
    ADD CONSTRAINT [FK#UserPrivilege@PrivelegeID#Privelege@ID] FOREIGN KEY ([PrivilegeID]) REFERENCES [ADM].[Privilege] ([ID]);


GO
PRINT N'Creating FK#UserPrivilege@UserID#User@ID...';


GO
ALTER TABLE [ADM].[UserPrivilege]
    ADD CONSTRAINT [FK#UserPrivilege@UserID#User@ID] FOREIGN KEY ([UserID]) REFERENCES [ADM].[User] ([ID]) ON DELETE CASCADE;


GO
PRINT N'Creating [CST].[TIU#Appointment]...';


GO
CREATE TRIGGER CST.TIU#Appointment
    on CST.Appointment
    after insert, update as
begin
    if(update(ToPay))
    begin
        /* создаю операции списания по событиям, если их еще не было */
        insert into CST.FinancialTransaction 
            (CustomerID, AppointmentID, TransactionTypeID, Amount, CreationTime, CreatedBy, Comment)
        select i.CustomerID, i.ID, 2, i.ToPay, i.CreationTime, i.CreatedBy, 'Списание средств за визит'
          from INSERTED i
         where not exists (select 1 
                             from CST.FinancialTransaction ft
                            where ft.AppointmentID = i.ID
                              and ft.TransactionTypeID = 2 /* списание со счета */);
        
        update ft
           set ft.Amount = i.ToPay,
               ft.ModificationTime = i.ModificationTime,
               ft.ModifiedBy = i.ModifiedBy
          from CST.FinancialTransaction ft
               inner join INSERTED i
            on ft.AppointmentID = i.ID
         where ft.TransactionTypeID = 2 /* списание со счета */;
    end;
    if(update(StateID))
    begin
        update ft
           set ft.IsCanceled = 1 
          from CST.FinancialTransaction ft
               inner join INSERTED i
            on (i.ID = ft.AppointmentID)
         where i.StateID = 3; /* canceled */
    end;                
end
GO
PRINT N'Creating [CST].[TU#Customer]...';


GO
CREATE TRIGGER [CST].TU#Customer
    on CST.Customer
    after update as
begin
    update c
       set c.ModificationTime = getdate()
      from CST.Customer c
           inner join INSERTED i
        on (i.ID = c.ID)
     where 1 = 1;      
end
GO
PRINT N'Creating [CST].[TIUD#FinancialTransaction]...';


GO
CREATE TRIGGER CST.TIUD#FinancialTransaction
    on CST.FinancialTransaction
    after insert, update, delete as
begin
    with balanceChanges
      as (select ft.CustomerID, 
                 sum(tt.OperationSign 
                     * case when ft.IsCanceled = 1
                            then 0
                            else ft.Amount
                       end) as Balance
            from CST.FinancialTransaction ft
                 inner join (select distinct CustomerID 
                               from INSERTED
                              where 1 = 1
                             union
                             select distinct CustomerID 
                               from DELETED
                              where 1 = 1) i
              on ft.CustomerID = i.CustomerID
                 inner join CONF.TransactionType tt
              on tt.ID = ft.TransactionTypeID
           where 1 = 1
           group by ft.CustomerID)
    update c
       set c.MoneyBalance = b.Balance
      from CST.Customer c
           inner join balanceChanges b
        on (c.ID = b.CustomerID)
     where 1 = 1;
   
end
GO
PRINT N'Creating [CONF].[GetCumulativeDiscountID]...';


GO
CREATE FUNCTION CONF.GetCumulativeDiscountID(@discountCardID int)
returns int
begin
    declare @result int;
    with discounts
        as (select cd.ID,
                   cd.PurchaseTopLimit, 
                   row_number() over (order by cd.PurchaseTopLimit) RowNumber
              from (select ID,
                           PurchaseTopLimit
                      from CONF.CumulativeDiscount
                    union all
                    select top 1
                           ID,
                           99999999999999
                      from CONF.CumulativeDiscount
                     where PurchaseTopLimit = (select max(PurchaseTopLimit)
                                                 from CONF.CumulativeDiscount)) cd
             where 1 = 1),
         discountQuant 
        as (select d1.ID, 
                   isnull(d2.PurchaseTopLimit, 0) as PurchaseTopLimitFrom,
                   d1.PurchaseTopLimit as PurchaseTopLimitTo
              from discounts d1
                   left outer join discounts d2
                on d2.RowNumber = d1.RowNumber - 1
             where 1 = 1)
    select top 1 
           @result = dq.ID
      from CST.DiscountCard dc
           inner join discountQuant dq
        on (dc.TotalPurchaseValue &gt;= dq.PurchaseTopLimitFrom
            and dc.TotalPurchaseValue &lt; dq.PurchaseTopLimitTo)
     where dc.ID = @discountCardID
     order by dq.PurchaseTopLimitTo desc
    
    return @result;
end;
GO
PRINT N'Creating [CST].[AppointmentView]...';


GO
CREATE VIEW CST.AppointmentView 
AS
 select a.ID as AppointmentID,
        a.CustomerID,
        c.FirstName as CustomerFirstName,
        c.LastName as CustomerLastName,
        c.MiddleName as CustomerMiddleName,
        dc.Code as DiscountCardCode,
        dc.DiscountPercent as DiscountCardPercent,
        dc.TotalPurchaseValue as DiscountCardTotalPurchaseValue,
        dc.MinDiscount as DiscountCardMinDiscount,
        dc.MaxDiscount as DiscountCardMaxDiscount,
        a.StartTime,
        a.EndTime,
        a.StaffID,
        a.Purpose,
        a.Price,
        a.DiscountPercent,
        a.Discount,
        a.ToPay,
        cast(isnull((select sum(ft.Amount)
                       from CST.FinancialTransaction ft
                            inner join CONF.TransactionType tt 
                         on ft.TransactionTypeID = tt.ID
                      where ft.AppointmentID = a.ID
                        and tt.OperationSign = 1), 0) as decimal(13,2)) as Payed,
        a.StateID,
        a.CreationTime,
        a.CreatedBy,
        a.ModificationTime,
        a.ModifiedBy
   from CST.Appointment a
        inner join CST.Customer c
     on a.CustomerID = c.ID
        left outer join CST.DiscountCard dc
     on c.DiscountCardID = dc.ID
  where 1 = 1
GO
PRINT N'Creating [CST].[CustomerView]...';


GO
CREATE VIEW CST.CustomerView 
AS
    select  c.ID as CustomerID,
        c.FirstName,
        c.LastName,
        c.MiddleName,
        c.Gender,
        c.Country,
        c.City,
        c.Region,
        c.Zip,
        c.Phone,
        c.MobilePhone,
        c.Email,
        c.Address,
        c.BirthDate,
        c.MoneyBalance,
        c.NotifyByEmail,
        c.NotifyBySms,
        c.NotifyByPost,
        c.CreationTime,
        c.ModificationTime,
        dc.ID as DiscountcardID,
        dc.Code as DiscountCardCode,
        dc.DiscountPercent,
        (select min(a.StartTime)
           from CST.Appointment a
          where a.CustomerID = c.ID
            and a.StateID != 3 /* Completed */) as FirstVisit,
        (select max(a.StartTime)
           from CST.Appointment a
          where a.CustomerID = c.ID
            and a.StartTime &lt; getdate()
            and a.StateID = 3 /* Completed */) as LastVisit,
        (select max(a.StartTime)
           from CST.Appointment a
          where a.CustomerID = c.ID
            and a.StartTime &gt; getdate()
            and a.StateID in (1, 2) /* Draft, Planned */) as NextVisit
  from CST.Customer c
       left outer join CST.DiscountCard dc
    on c.DiscountCardID = dc.ID
 where 1 =1
GO
PRINT N'Creating [CST].[FinancialTransactionView]...';


GO
CREATE VIEW CST.FinancialTransactionView 
AS
 select  ft.ID,
         ft.CustomerID,
         c.FirstName as CustomerFirstName,
         c.LastName as CustomerLastName,
         c.MiddleName as CustomerMiddleName,
         dc.Code as DiscountCardCode,
         dc.DiscountPercent as DiscountCardPercent,
         dc.TotalPurchaseValue as DiscountCardTotalPurchaseValue,
         dc.MinDiscount as DiscountCardMinDiscount,
         dc.MaxDiscount as DiscountCardMaxDiscount,
         ft.AppointmentID,
         a.Purpose as AppointmentPurpose,
         a.StartTime as AppointmentStartTime,
         a.EndTime as AppointmentEndTime,
         a.StaffID,
         a.Price,
         a.ToPay,
         a.DiscountPercent,
         a.Discount,
         ft.TransactionTypeID,
         ft.Amount,
         ft.Comment,
         ft.CreationTime,
         ft.CreatedBy,
         ft.ModificationTime,
         ft.ModifiedBy,
         ft.IsCanceled
   from CST.FinancialTransaction ft
        inner join CST.Appointment a
     on ft.AppointmentID = a.ID
        inner join CST.Customer c
     on ft.CustomerID = c.ID
        left outer join CST.DiscountCard dc
     on c.DiscountCardID = dc.ID   
  where 1 = 1
GO
PRINT N'Creating [APP].[GetCustomerDashboardData]...';


GO
CREATE PROCEDURE APP.GetCustomerDashboardData
    @date datetime2
AS 
    with data
        as (select c.ID as CustomerID,
                   c.FirstName,
                   c.LastName,
                   c.MiddleName,
                   c.MobilePhone,
                   c.DiscountCardID,
                   a.StartDate as NearestAppointmentDate,
                   row_number() over (order by a.StartDate desc, 
                                               c.LastName,
                                               c.FirstName) as RowNum
              from CST.Customer c
                   left outer join (select CustomerID,
                                           min(StartTime) as StartDate
                                      from CST.Appointment
                                     where EndTime &gt; @date
                                     group by CustomerID) a
                on a.CustomerID = c.ID
             where 1 = 1)
    select  d.CustomerID,
            d.FirstName,
            d.LastName,
            d.MiddleName,
            d.MobilePhone,
            dc.Code as DiscountCardCode,
            d.NearestAppointmentDate,
            case when d.NearestAppointmentDate is null 
                  and d1.NearestAppointmentDate is not null 
                 then 1
            else 0
            end as NewGroup
      from data d
           left outer join data d1
        on d1.RowNum= d.RowNum - 1
           left outer join CST.DiscountCard dc
        on dc.ID = d.DiscountCardID
     order by isnull(d.NearestAppointmentDate, '2199/01/01'),
              d.LastName,
              d.FirstName;
GO
PRINT N'Creating [CST].[UpdateFinancialTransaction]...';


GO
CREATE PROCEDURE CST.UpdateFinancialTransaction
    @id int,
    @userID int,
    @transactionTypeID int,
    @customerID int,
    @appointmentID int,
    @amount decimal(13, 2),
    @comment nvarchar(4000)
AS 
begin
    begin transaction;
    begin try
        declare @message nvarchar(4000);
        
        select @transactionTypeID = ft.TransactionTypeID,
               @customerID = ft.CustomerID
          from CST.FinancialTransaction ft
         where ID = @id;

        update CST.FinancialTransaction 
           set CustomerID = @customerID,
               TransactionTypeID = @transactionTypeID,
               AppointmentID = @appointmentID,
               Amount = @amount,
               Comment = @comment,
               ModifiedBy = @userID,
               ModificationTime = getdate() 
         where ID = @id;
            
        if(exists(select 1 /* операция увеличивает баланс */
                    from CONF.TransactionType tt
                   where tt.OperationSign = 1
                     and tt.ID = @transactionTypeID)
           and exists(select 1 /* клиент имеет дисконтную карту */
                        from CST.DiscountCard dc 
                             inner join CST.Customer c 
                          on dc.ID = c.DiscountCardID
                       where c.ID = @customerID))
        begin
            declare @discountCardID int,
                    @discountType int,
                    @totalPurchaseValue decimal(13,2);

            select @discountCardID = dc.ID,
                   @discountType = dc.DiscountTypeID
              from CST.DiscountCard dc 
                   inner join CST.Customer c 
                on dc.ID = c.DiscountCardID
             where c.ID = @customerID;

            select @totalPurchaseValue = sum(ft.Amount)
              from CST.Customer c
                   inner join CST.FinancialTransaction ft
                on ft.CustomerID = c.ID
                   inner join CONF.TransactionType tt 
                on (ft.TransactionTypeID = tt.ID
                    and tt.OperationSign = 1) 
             where c.DiscountCardID = @discountCardID;

            update CST.DiscountCard
               set TotalPurchaseValue = isnull(@totalPurchaseValue, 0)
             where ID = @discountCardID;

            if(@discountType = 1 /* накопительная скидка */)
            begin
                declare @cumulativeDiscountID int;
                set @cumulativeDiscountID = CONF.GetCumulativeDiscountID(@discountCardID);
                
                update dc
                   set dc.DiscountPercent = isnull(cd.[Percent], dc.DiscountPercent),
                       dc.MinDiscount = isnull(cd.MinDiscount, dc.MinDiscount),
                       dc.MaxDiscount = isnull(cd.MaxDiscount, dc.MaxDiscount)
                  from CST.DiscountCard dc
                       left outer join CONF.CumulativeDiscount cd
                    on (@cumulativeDiscountID is not null 
                        and cd.ID = @cumulativeDiscountID)
                 where dc.ID = @discountCardID;                
            end;
        end;
        commit;
    end try
    begin catch
        set @message = error_message();
        rollback;
        raiserror(@message, 16, 1);
    end catch;

    select  ft.ID,
            ft.CustomerID,
            ft.AppointmentID,
            ft.TransactionTypeID,
            ft.Amount,
            ft.Comment,
            ft.CreationTime,
            ft.CreatedBy,
            ft.ModificationTime,
            ft.ModifiedBy 
      from CST.FinancialTransaction ft
     where ft.ID = @id;
end
GO
PRINT N'Creating [CST].[DeleteFinancialTransaction]...';


GO
CREATE PROCEDURE CST.DeleteFinancialTransaction
    @id int
AS 
begin
    begin transaction;
    begin try
        declare @transactionTypeID int,
                @customerID int,
                @message nvarchar(4000);
        
        select @transactionTypeID = ft.TransactionTypeID,
               @customerID = ft.CustomerID
          from CST.FinancialTransaction ft
         where ID = @id;

        delete from CST.FinancialTransaction 
         where ID = @id
            
        if(exists(select 1 /* операция увеличивает баланс */
                    from CONF.TransactionType tt
                   where tt.OperationSign = 1
                     and tt.ID = @transactionTypeID)
           and exists(select 1 /* клиент имеет дисконтную карту */
                        from CST.DiscountCard dc 
                             inner join CST.Customer c 
                          on dc.ID = c.DiscountCardID
                       where c.ID = @customerID))
        begin
            declare @discountCardID int,
                    @discountType int,
                    @totalPurchaseValue decimal(13,2);

            select @discountCardID = dc.ID,
                   @discountType = dc.DiscountTypeID
              from CST.DiscountCard dc 
                   inner join CST.Customer c 
                on dc.ID = c.DiscountCardID
             where c.ID = @customerID;

            select @totalPurchaseValue = sum(ft.Amount)
              from CST.Customer c
                   inner join CST.FinancialTransaction ft
                on ft.CustomerID = c.ID
                   inner join CONF.TransactionType tt 
                on (ft.TransactionTypeID = tt.ID
                    and tt.OperationSign = 1) 
             where c.DiscountCardID = @discountCardID;

            update CST.DiscountCard
               set TotalPurchaseValue = isnull(@totalPurchaseValue, 0)
             where ID = @discountCardID;

            if(@discountType = 1 /* накопительная скидка */)
            begin
                declare @cumulativeDiscountID int;
                set @cumulativeDiscountID = CONF.GetCumulativeDiscountID(@discountCardID);
                
                update dc
                   set dc.DiscountPercent = isnull(cd.[Percent], dc.DiscountPercent),
                       dc.MinDiscount = isnull(cd.MinDiscount, dc.MinDiscount),
                       dc.MaxDiscount = isnull(cd.MaxDiscount, dc.MaxDiscount)
                  from CST.DiscountCard dc
                       left outer join CONF.CumulativeDiscount cd
                    on (@cumulativeDiscountID is not null 
                        and cd.ID = @cumulativeDiscountID)
                 where dc.ID = @discountCardID;                
            end;
        end;
        commit;
    end try
    begin catch
        set @message = error_message();
        rollback;
        raiserror(@message, 16, 1);
    end catch;
end
GO
PRINT N'Creating [CST].[CreateFinancialTransaction]...';


GO
CREATE PROCEDURE CST.CreateFinancialTransaction
    @userID int,
    @transactionTypeID int,
    @customerID int,
    @appointmentID int,
    @amount decimal(13, 2),
    @comment nvarchar(4000)
AS 
begin
    declare @id int,
            @discountCardID int,
            @discountType int,
            @totalPurchaseValue decimal(13, 2),
            @now datetime,
            @message nvarchar(4000);
    set @now = getdate();
    begin transaction;
    begin try
        insert into CST.FinancialTransaction 
            (CustomerID, AppointmentID, TransactionTypeID, Amount, Comment, CreationTIme, CreatedBy)
        values 
            (@customerID, @appointmentID, @transactionTypeID, @amount, @comment, getdate(), @userID);
        set @id = scope_identity();
        if(exists(select 1 /* операция увеличивает баланс */
                    from CONF.TransactionType tt
                   where tt.OperationSign = 1
                     and tt.ID = @transactionTypeID)
           and exists(select 1 /* клиент имеет дисконтную карту */
                        from CST.DiscountCard dc 
                             inner join CST.Customer c 
                          on dc.ID = c.DiscountCardID
                       where c.ID = @customerID))
        begin
            select @discountCardID = dc.ID,
                   @discountType = dc.DiscountTypeID
              from CST.DiscountCard dc 
                   inner join CST.Customer c 
                on dc.ID = c.DiscountCardID
             where c.ID = @customerID;

                select @totalPurchaseValue = sum(ft.Amount)
                  from CST.Customer c
                       inner join CST.FinancialTransaction ft
                    on ft.CustomerID = c.ID
                       inner join CONF.TransactionType tt 
                    on (ft.TransactionTypeID = tt.ID
                        and tt.OperationSign = 1) 
                 where c.DiscountCardID = @discountCardID;

                update CST.DiscountCard
                   set TotalPurchaseValue = isnull(@totalPurchaseValue, 0)
                 where ID = @discountCardID;

            if(@discountType = 1 /* накопительная скидка */)
            begin
                declare @cumulativeDiscountID int;
                set @cumulativeDiscountID = CONF.GetCumulativeDiscountID(@discountCardID);
                
                update dc
                   set dc.DiscountPercent = isnull(cd.[Percent], dc.DiscountPercent),
                       dc.MinDiscount = isnull(cd.MinDiscount, dc.MinDiscount),
                       dc.MaxDiscount = isnull(cd.MaxDiscount, dc.MaxDiscount)
                  from CST.DiscountCard dc
                       left outer join CONF.CumulativeDiscount cd
                    on (@cumulativeDiscountID is not null 
                        and cd.ID = @cumulativeDiscountID)
                 where dc.ID = @discountCardID;                
            end;
        end;
        commit;
    end try
    begin catch
        set @message = error_message();
        rollback;
        raiserror(@message, 16, 1);
    end catch;
    
    select  ft.ID,
            ft.CustomerID,
            ft.AppointmentID,
            ft.TransactionTypeID,
            ft.Amount,
            ft.Comment,
            ft.CreationTime,
            ft.CreatedBy,
            ft.ModificationTime,
            ft.ModifiedBy
      from CST.FinancialTransaction ft 
     where ft.ID = @id;
end
GO
PRINT N'Creating Permission...';


GO
GRANT CONNECT TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[APP].[GetCustomerDashboardData] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[CONF].[DiscountType] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[CONF].[DiscountType] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[CONF].[DiscountType] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[CONF].[DiscountType] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[CONF].[PrivelegeGroup] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[CONF].[PrivelegeGroup] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[CONF].[PrivelegeGroup] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[CONF].[PrivelegeGroup] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[CONF].[TransactionType] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[CONF].[TransactionType] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[CONF].[TransactionType] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[CONF].[TransactionType] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[CONF].[AppointmentState] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[CONF].[AppointmentState] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[CONF].[AppointmentState] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[CONF].[AppointmentState] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[CONF].[CumulativeDiscount] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[CONF].[CumulativeDiscount] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[CONF].[CumulativeDiscount] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[CONF].[CumulativeDiscount] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[CST].[AppointmentView] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[CST].[CustomerView] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[CST].[UpdateFinancialTransaction] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[CST].[DeleteFinancialTransaction] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[CST].[CreateFinancialTransaction] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[CST].[FinancialTransactionView] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[CST].[Appointment] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[CST].[Appointment] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[CST].[Appointment] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[CST].[Appointment] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[CST].[Customer] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[CST].[Customer] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[CST].[Customer] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[CST].[Customer] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[CST].[DiscountCard] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[CST].[DiscountCard] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[CST].[DiscountCard] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[CST].[DiscountCard] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[CST].[FinancialTransaction] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[CST].[FinancialTransaction] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[CST].[FinancialTransaction] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[CST].[FinancialTransaction] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[STF].[Staff] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[STF].[Staff] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[STF].[Staff] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[STF].[Staff] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[ADM].[Privilege] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[ADM].[Privilege] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[ADM].[Privilege] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[ADM].[Privilege] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[ADM].[User] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[ADM].[User] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[ADM].[User] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[ADM].[User] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[ADM].[UserPrivilege] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[ADM].[UserPrivilege] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[ADM].[UserPrivilege] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[ADM].[UserPrivilege] TO [AppUser]
    AS [dbo];


GO
PRINT N'Creating [CONF].[DiscountType].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Тип дисконта', @level0type = N'SCHEMA', @level0name = N'CONF', @level1type = N'TABLE', @level1name = N'DiscountType';


GO
PRINT N'Creating [CONF].[DiscountType].[ID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'ИД типа дисконта', @level0type = N'SCHEMA', @level0name = N'CONF', @level1type = N'TABLE', @level1name = N'DiscountType', @level2type = N'COLUMN', @level2name = N'ID';


GO
PRINT N'Creating [CONF].[DiscountType].[Code].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Код типа дисконта', @level0type = N'SCHEMA', @level0name = N'CONF', @level1type = N'TABLE', @level1name = N'DiscountType', @level2type = N'COLUMN', @level2name = N'Code';


GO
PRINT N'Creating [CONF].[DiscountType].[Name].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Название типа дисконта', @level0type = N'SCHEMA', @level0name = N'CONF', @level1type = N'TABLE', @level1name = N'DiscountType', @level2type = N'COLUMN', @level2name = N'Name';


GO
PRINT N'Creating [CONF].[DiscountType].[Description].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Описание типа дисконта', @level0type = N'SCHEMA', @level0name = N'CONF', @level1type = N'TABLE', @level1name = N'DiscountType', @level2type = N'COLUMN', @level2name = N'Description';


GO
PRINT N'Creating [CONF].[PrivelegeGroup].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Группа привелегий', @level0type = N'SCHEMA', @level0name = N'CONF', @level1type = N'TABLE', @level1name = N'PrivelegeGroup';


GO
PRINT N'Creating [CONF].[PrivelegeGroup].[ID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'ИД группы', @level0type = N'SCHEMA', @level0name = N'CONF', @level1type = N'TABLE', @level1name = N'PrivelegeGroup', @level2type = N'COLUMN', @level2name = N'ID';


GO
PRINT N'Creating [CONF].[PrivelegeGroup].[Code].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Код', @level0type = N'SCHEMA', @level0name = N'CONF', @level1type = N'TABLE', @level1name = N'PrivelegeGroup', @level2type = N'COLUMN', @level2name = N'Code';


GO
PRINT N'Creating [CONF].[PrivelegeGroup].[Name].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Название', @level0type = N'SCHEMA', @level0name = N'CONF', @level1type = N'TABLE', @level1name = N'PrivelegeGroup', @level2type = N'COLUMN', @level2name = N'Name';


GO
PRINT N'Creating [CONF].[PrivelegeGroup].[Description].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Описание', @level0type = N'SCHEMA', @level0name = N'CONF', @level1type = N'TABLE', @level1name = N'PrivelegeGroup', @level2type = N'COLUMN', @level2name = N'Description';


GO
PRINT N'Creating [CONF].[TransactionType].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Типы финансовых операций', @level0type = N'SCHEMA', @level0name = N'CONF', @level1type = N'TABLE', @level1name = N'TransactionType';


GO
PRINT N'Creating [CONF].[TransactionType].[ID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'ИД типа операции', @level0type = N'SCHEMA', @level0name = N'CONF', @level1type = N'TABLE', @level1name = N'TransactionType', @level2type = N'COLUMN', @level2name = N'ID';


GO
PRINT N'Creating [CONF].[TransactionType].[Code].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Код', @level0type = N'SCHEMA', @level0name = N'CONF', @level1type = N'TABLE', @level1name = N'TransactionType', @level2type = N'COLUMN', @level2name = N'Code';


GO
PRINT N'Creating [CONF].[TransactionType].[Name].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Название', @level0type = N'SCHEMA', @level0name = N'CONF', @level1type = N'TABLE', @level1name = N'TransactionType', @level2type = N'COLUMN', @level2name = N'Name';


GO
PRINT N'Creating [CONF].[TransactionType].[Description].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Описание', @level0type = N'SCHEMA', @level0name = N'CONF', @level1type = N'TABLE', @level1name = N'TransactionType', @level2type = N'COLUMN', @level2name = N'Description';


GO
PRINT N'Creating [CONF].[TransactionType].[OperationSign].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Знак операции по отношению к балансу клиента (1 - прибавление, -1 - вычитание)', @level0type = N'SCHEMA', @level0name = N'CONF', @level1type = N'TABLE', @level1name = N'TransactionType', @level2type = N'COLUMN', @level2name = N'OperationSign';


GO
PRINT N'Creating [CONF].[AppointmentState].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Справочник состояний событий', @level0type = N'SCHEMA', @level0name = N'CONF', @level1type = N'TABLE', @level1name = N'AppointmentState';


GO
PRINT N'Creating [CONF].[AppointmentState].[ID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'ИД состяния', @level0type = N'SCHEMA', @level0name = N'CONF', @level1type = N'TABLE', @level1name = N'AppointmentState', @level2type = N'COLUMN', @level2name = N'ID';


GO
PRINT N'Creating [CONF].[AppointmentState].[Code].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Код', @level0type = N'SCHEMA', @level0name = N'CONF', @level1type = N'TABLE', @level1name = N'AppointmentState', @level2type = N'COLUMN', @level2name = N'Code';


GO
PRINT N'Creating [CONF].[AppointmentState].[Name].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Название', @level0type = N'SCHEMA', @level0name = N'CONF', @level1type = N'TABLE', @level1name = N'AppointmentState', @level2type = N'COLUMN', @level2name = N'Name';


GO
PRINT N'Creating [CONF].[AppointmentState].[Description].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Описание', @level0type = N'SCHEMA', @level0name = N'CONF', @level1type = N'TABLE', @level1name = N'AppointmentState', @level2type = N'COLUMN', @level2name = N'Description';


GO
PRINT N'Creating [CONF].[CumulativeDiscount].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Справочни нкопительных скидок', @level0type = N'SCHEMA', @level0name = N'CONF', @level1type = N'TABLE', @level1name = N'CumulativeDiscount';


GO
PRINT N'Creating [CONF].[CumulativeDiscount].[ID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'ИД накопительной скидки', @level0type = N'SCHEMA', @level0name = N'CONF', @level1type = N'TABLE', @level1name = N'CumulativeDiscount', @level2type = N'COLUMN', @level2name = N'ID';


GO
PRINT N'Creating [CONF].[CumulativeDiscount].[Name].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Название скидки', @level0type = N'SCHEMA', @level0name = N'CONF', @level1type = N'TABLE', @level1name = N'CumulativeDiscount', @level2type = N'COLUMN', @level2name = N'Name';


GO
PRINT N'Creating [CONF].[CumulativeDiscount].[Percent].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Процент скидки', @level0type = N'SCHEMA', @level0name = N'CONF', @level1type = N'TABLE', @level1name = N'CumulativeDiscount', @level2type = N'COLUMN', @level2name = N'Percent';


GO
PRINT N'Creating [CONF].[CumulativeDiscount].[MinDiscount].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Мин. скидка', @level0type = N'SCHEMA', @level0name = N'CONF', @level1type = N'TABLE', @level1name = N'CumulativeDiscount', @level2type = N'COLUMN', @level2name = N'MinDiscount';


GO
PRINT N'Creating [CONF].[CumulativeDiscount].[MaxDiscount].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Макс. скидка', @level0type = N'SCHEMA', @level0name = N'CONF', @level1type = N'TABLE', @level1name = N'CumulativeDiscount', @level2type = N'COLUMN', @level2name = N'MaxDiscount';


GO
PRINT N'Creating [CONF].[CumulativeDiscount].[PurchaseTopLimit].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Верхняя граница потраченной за период суммы', @level0type = N'SCHEMA', @level0name = N'CONF', @level1type = N'TABLE', @level1name = N'CumulativeDiscount', @level2type = N'COLUMN', @level2name = N'PurchaseTopLimit';


GO
PRINT N'Creating [CST].[Appointment].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Событие', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'Appointment';


GO
PRINT N'Creating [CST].[Appointment].[ID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'ИД события', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'Appointment', @level2type = N'COLUMN', @level2name = N'ID';


GO
PRINT N'Creating [CST].[Appointment].[CustomerID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'ИД клиента', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'Appointment', @level2type = N'COLUMN', @level2name = N'CustomerID';


GO
PRINT N'Creating [CST].[Appointment].[StartTime].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Дата и время начала', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'Appointment', @level2type = N'COLUMN', @level2name = N'StartTime';


GO
PRINT N'Creating [CST].[Appointment].[EndTime].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Дата и время окончания', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'Appointment', @level2type = N'COLUMN', @level2name = N'EndTime';


GO
PRINT N'Creating [CST].[Appointment].[StaffID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'ИД сотрудника, ответсвенного за встречу', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'Appointment', @level2type = N'COLUMN', @level2name = N'StaffID';


GO
PRINT N'Creating [CST].[Appointment].[Purpose].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Цель события', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'Appointment', @level2type = N'COLUMN', @level2name = N'Purpose';


GO
PRINT N'Creating [CST].[Appointment].[Price].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Сумма', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'Appointment', @level2type = N'COLUMN', @level2name = N'Price';


GO
PRINT N'Creating [CST].[Appointment].[DiscountPercent].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Процент скидки', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'Appointment', @level2type = N'COLUMN', @level2name = N'DiscountPercent';


GO
PRINT N'Creating [CST].[Appointment].[Discount].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Скидка', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'Appointment', @level2type = N'COLUMN', @level2name = N'Discount';


GO
PRINT N'Creating [CST].[Appointment].[ToPay].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'К оплате', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'Appointment', @level2type = N'COLUMN', @level2name = N'ToPay';


GO
PRINT N'Creating [CST].[Appointment].[StateID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'ИД состояния события', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'Appointment', @level2type = N'COLUMN', @level2name = N'StateID';


GO
PRINT N'Creating [CST].[Appointment].[CreationTime].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Дата и время создания события', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'Appointment', @level2type = N'COLUMN', @level2name = N'CreationTime';


GO
PRINT N'Creating [CST].[Appointment].[CreatedBy].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'ИД пользвателя, создавшего событие', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'Appointment', @level2type = N'COLUMN', @level2name = N'CreatedBy';


GO
PRINT N'Creating [CST].[Appointment].[ModificationTime].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Дата и время изменения события', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'Appointment', @level2type = N'COLUMN', @level2name = N'ModificationTime';


GO
PRINT N'Creating [CST].[Appointment].[ModifiedBy].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'ИД пользователя, изменившего событие', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'Appointment', @level2type = N'COLUMN', @level2name = N'ModifiedBy';


GO
PRINT N'Creating [CST].[Customer].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Личная карточка (ЛК) клиента', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'Customer';


GO
PRINT N'Creating [CST].[Customer].[ID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'ИД клиента', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'Customer', @level2type = N'COLUMN', @level2name = N'ID';


GO
PRINT N'Creating [CST].[Customer].[FirstName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Имя', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'Customer', @level2type = N'COLUMN', @level2name = N'FirstName';


GO
PRINT N'Creating [CST].[Customer].[LastName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Фамилия', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'Customer', @level2type = N'COLUMN', @level2name = N'LastName';


GO
PRINT N'Creating [CST].[Customer].[MiddleName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Отчество', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'Customer', @level2type = N'COLUMN', @level2name = N'MiddleName';


GO
PRINT N'Creating [CST].[Customer].[Phone].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Номер телефона', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'Customer', @level2type = N'COLUMN', @level2name = N'Phone';


GO
PRINT N'Creating [CST].[Customer].[Email].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Адрес эл.почты', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'Customer', @level2type = N'COLUMN', @level2name = N'Email';


GO
PRINT N'Creating [CST].[Customer].[Address].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Фактический адрес проживания', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'Customer', @level2type = N'COLUMN', @level2name = N'Address';


GO
PRINT N'Creating [CST].[Customer].[BirthDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Дата рождения', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'Customer', @level2type = N'COLUMN', @level2name = N'BirthDate';


GO
PRINT N'Creating [CST].[Customer].[DiscountCardID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'ИД дисконтной карты', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'Customer', @level2type = N'COLUMN', @level2name = N'DiscountCardID';


GO
PRINT N'Creating [CST].[Customer].[UserID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'ИД зарегистрированного пользователя', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'Customer', @level2type = N'COLUMN', @level2name = N'UserID';


GO
PRINT N'Creating [CST].[Customer].[Photo].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Фотография', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'Customer', @level2type = N'COLUMN', @level2name = N'Photo';


GO
PRINT N'Creating [CST].[Customer].[MoneyBalance].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Баланс клиента', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'Customer', @level2type = N'COLUMN', @level2name = N'MoneyBalance';


GO
PRINT N'Creating [CST].[Customer].[MobilePhone].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Номер контектного телефона', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'Customer', @level2type = N'COLUMN', @level2name = N'MobilePhone';


GO
PRINT N'Creating [CST].[Customer].[Gender].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Пол: 1-мужской, 2 - женский', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'Customer', @level2type = N'COLUMN', @level2name = N'Gender';


GO
PRINT N'Creating [CST].[Customer].[Country].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Страна', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'Customer', @level2type = N'COLUMN', @level2name = N'Country';


GO
PRINT N'Creating [CST].[Customer].[City].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Город', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'Customer', @level2type = N'COLUMN', @level2name = N'City';


GO
PRINT N'Creating [CST].[Customer].[Region].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Область', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'Customer', @level2type = N'COLUMN', @level2name = N'Region';


GO
PRINT N'Creating [CST].[Customer].[Zip].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Индекс', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'Customer', @level2type = N'COLUMN', @level2name = N'Zip';


GO
PRINT N'Creating [CST].[Customer].[NotifyByEmail].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Оповещать по эл.почте', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'Customer', @level2type = N'COLUMN', @level2name = N'NotifyByEmail';


GO
PRINT N'Creating [CST].[Customer].[NotifyBySms].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Оповещать по СМС', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'Customer', @level2type = N'COLUMN', @level2name = N'NotifyBySms';


GO
PRINT N'Creating [CST].[Customer].[NotifyByPost].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Оповещать по почте', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'Customer', @level2type = N'COLUMN', @level2name = N'NotifyByPost';


GO
PRINT N'Creating [CST].[Customer].[CreationTime].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Дата создания записи', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'Customer', @level2type = N'COLUMN', @level2name = N'CreationTime';


GO
PRINT N'Creating [CST].[Customer].[ModificationTime].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Дата последнего изменения', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'Customer', @level2type = N'COLUMN', @level2name = N'ModificationTime';


GO
PRINT N'Creating [CST].[DiscountCard].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Дисконтная карта', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'DiscountCard';


GO
PRINT N'Creating [CST].[DiscountCard].[ID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'ИД дисконтной карты', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'DiscountCard', @level2type = N'COLUMN', @level2name = N'ID';


GO
PRINT N'Creating [CST].[DiscountCard].[Code].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Код карты', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'DiscountCard', @level2type = N'COLUMN', @level2name = N'Code';


GO
PRINT N'Creating [CST].[DiscountCard].[DiscountPercent].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Текущий процент скидки', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'DiscountCard', @level2type = N'COLUMN', @level2name = N'DiscountPercent';


GO
PRINT N'Creating [CST].[DiscountCard].[TotalPurchaseValue].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Полная стоимость расходов по карте', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'DiscountCard', @level2type = N'COLUMN', @level2name = N'TotalPurchaseValue';


GO
PRINT N'Creating [CST].[DiscountCard].[DiscountTypeID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Правило распределения дисконта', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'DiscountCard', @level2type = N'COLUMN', @level2name = N'DiscountTypeID';


GO
PRINT N'Creating [CST].[DiscountCard].[MinDiscount].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Минимальная скидка по карте', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'DiscountCard', @level2type = N'COLUMN', @level2name = N'MinDiscount';


GO
PRINT N'Creating [CST].[DiscountCard].[MaxDiscount].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Максимальная скидка по карте', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'DiscountCard', @level2type = N'COLUMN', @level2name = N'MaxDiscount';


GO
PRINT N'Creating [CST].[FinancialTransaction].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Финансовая операции клиента', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'FinancialTransaction';


GO
PRINT N'Creating [CST].[FinancialTransaction].[ID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'ИД платежа', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'FinancialTransaction', @level2type = N'COLUMN', @level2name = N'ID';


GO
PRINT N'Creating [CST].[FinancialTransaction].[CustomerID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'ИД клиента', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'FinancialTransaction', @level2type = N'COLUMN', @level2name = N'CustomerID';


GO
PRINT N'Creating [CST].[FinancialTransaction].[AppointmentID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'ИД события', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'FinancialTransaction', @level2type = N'COLUMN', @level2name = N'AppointmentID';


GO
PRINT N'Creating [CST].[FinancialTransaction].[TransactionTypeID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'ИД типа операции', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'FinancialTransaction', @level2type = N'COLUMN', @level2name = N'TransactionTypeID';


GO
PRINT N'Creating [CST].[FinancialTransaction].[Amount].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Сумма', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'FinancialTransaction', @level2type = N'COLUMN', @level2name = N'Amount';


GO
PRINT N'Creating [CST].[FinancialTransaction].[Comment].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Комментарий по операции', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'FinancialTransaction', @level2type = N'COLUMN', @level2name = N'Comment';


GO
PRINT N'Creating [CST].[FinancialTransaction].[CreationTime].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Дата и время создания', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'FinancialTransaction', @level2type = N'COLUMN', @level2name = N'CreationTime';


GO
PRINT N'Creating [CST].[FinancialTransaction].[CreatedBy].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'ИД пользвателя, создавшего событие', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'FinancialTransaction', @level2type = N'COLUMN', @level2name = N'CreatedBy';


GO
PRINT N'Creating [CST].[FinancialTransaction].[ModificationTime].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Дата и время изменения', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'FinancialTransaction', @level2type = N'COLUMN', @level2name = N'ModificationTime';


GO
PRINT N'Creating [CST].[FinancialTransaction].[ModifiedBy].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'ИД пользвателя, выполнившего изменение', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'FinancialTransaction', @level2type = N'COLUMN', @level2name = N'ModifiedBy';


GO
PRINT N'Creating [CST].[FinancialTransaction].[IsCanceled].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Признак отмены', @level0type = N'SCHEMA', @level0name = N'CST', @level1type = N'TABLE', @level1name = N'FinancialTransaction', @level2type = N'COLUMN', @level2name = N'IsCanceled';


GO
PRINT N'Creating [STF].[Staff].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Личные карточки персонала', @level0type = N'SCHEMA', @level0name = N'STF', @level1type = N'TABLE', @level1name = N'Staff';


GO
PRINT N'Creating [STF].[Staff].[ID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'ИД сотрудника', @level0type = N'SCHEMA', @level0name = N'STF', @level1type = N'TABLE', @level1name = N'Staff', @level2type = N'COLUMN', @level2name = N'ID';


GO
PRINT N'Creating [STF].[Staff].[FirstName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Имя', @level0type = N'SCHEMA', @level0name = N'STF', @level1type = N'TABLE', @level1name = N'Staff', @level2type = N'COLUMN', @level2name = N'FirstName';


GO
PRINT N'Creating [STF].[Staff].[LastName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Фамилия', @level0type = N'SCHEMA', @level0name = N'STF', @level1type = N'TABLE', @level1name = N'Staff', @level2type = N'COLUMN', @level2name = N'LastName';


GO
PRINT N'Creating [STF].[Staff].[MiddleName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Отчество', @level0type = N'SCHEMA', @level0name = N'STF', @level1type = N'TABLE', @level1name = N'Staff', @level2type = N'COLUMN', @level2name = N'MiddleName';


GO
PRINT N'Creating [STF].[Staff].[Photo].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Фотография', @level0type = N'SCHEMA', @level0name = N'STF', @level1type = N'TABLE', @level1name = N'Staff', @level2type = N'COLUMN', @level2name = N'Photo';


GO
PRINT N'Creating [STF].[Staff].[DismissalDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Дата увольнения', @level0type = N'SCHEMA', @level0name = N'STF', @level1type = N'TABLE', @level1name = N'Staff', @level2type = N'COLUMN', @level2name = N'DismissalDate';


GO
PRINT N'Creating [STF].[Staff].[UserID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'ИД пользователя в системе', @level0type = N'SCHEMA', @level0name = N'STF', @level1type = N'TABLE', @level1name = N'Staff', @level2type = N'COLUMN', @level2name = N'UserID';


GO
PRINT N'Creating [STF].[Staff].[Position].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Должность', @level0type = N'SCHEMA', @level0name = N'STF', @level1type = N'TABLE', @level1name = N'Staff', @level2type = N'COLUMN', @level2name = N'Position';


GO
PRINT N'Creating [ADM].[Privilege].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Справочник полномочий', @level0type = N'SCHEMA', @level0name = N'ADM', @level1type = N'TABLE', @level1name = N'Privilege';


GO
PRINT N'Creating [ADM].[Privilege].[ID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'ИД полномочия', @level0type = N'SCHEMA', @level0name = N'ADM', @level1type = N'TABLE', @level1name = N'Privilege', @level2type = N'COLUMN', @level2name = N'ID';


GO
PRINT N'Creating [ADM].[Privilege].[Name].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Название ', @level0type = N'SCHEMA', @level0name = N'ADM', @level1type = N'TABLE', @level1name = N'Privilege', @level2type = N'COLUMN', @level2name = N'Name';


GO
PRINT N'Creating [ADM].[Privilege].[Description].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Описание', @level0type = N'SCHEMA', @level0name = N'ADM', @level1type = N'TABLE', @level1name = N'Privilege', @level2type = N'COLUMN', @level2name = N'Description';


GO
PRINT N'Creating [ADM].[Privilege].[GroupID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'ИД группы привелегий', @level0type = N'SCHEMA', @level0name = N'ADM', @level1type = N'TABLE', @level1name = N'Privilege', @level2type = N'COLUMN', @level2name = N'GroupID';


GO
PRINT N'Creating [ADM].[User].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Учетная запись пользователя', @level0type = N'SCHEMA', @level0name = N'ADM', @level1type = N'TABLE', @level1name = N'User';


GO
PRINT N'Creating [ADM].[User].[ID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'ИД пользователя', @level0type = N'SCHEMA', @level0name = N'ADM', @level1type = N'TABLE', @level1name = N'User', @level2type = N'COLUMN', @level2name = N'ID';


GO
PRINT N'Creating [ADM].[User].[Login].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Логин пользователя', @level0type = N'SCHEMA', @level0name = N'ADM', @level1type = N'TABLE', @level1name = N'User', @level2type = N'COLUMN', @level2name = N'Login';


GO
PRINT N'Creating [ADM].[User].[Password].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Пароль пользователя', @level0type = N'SCHEMA', @level0name = N'ADM', @level1type = N'TABLE', @level1name = N'User', @level2type = N'COLUMN', @level2name = N'Password';


GO
PRINT N'Creating [ADM].[User].[Email].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Адрес эл. почты', @level0type = N'SCHEMA', @level0name = N'ADM', @level1type = N'TABLE', @level1name = N'User', @level2type = N'COLUMN', @level2name = N'Email';


GO
PRINT N'Creating [ADM].[User].[ExpirationDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Дата блокировки учетной записи', @level0type = N'SCHEMA', @level0name = N'ADM', @level1type = N'TABLE', @level1name = N'User', @level2type = N'COLUMN', @level2name = N'ExpirationDate';


GO
PRINT N'Creating [ADM].[User].[IsSystem].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Признак системного пользователя', @level0type = N'SCHEMA', @level0name = N'ADM', @level1type = N'TABLE', @level1name = N'User', @level2type = N'COLUMN', @level2name = N'IsSystem';


GO
PRINT N'Creating [ADM].[UserPrivilege].[UserID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'ИД учетной записи', @level0type = N'SCHEMA', @level0name = N'ADM', @level1type = N'TABLE', @level1name = N'UserPrivilege', @level2type = N'COLUMN', @level2name = N'UserID';


GO
PRINT N'Creating [ADM].[UserPrivilege].[PrivilegeID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'ИД привилегии', @level0type = N'SCHEMA', @level0name = N'ADM', @level1type = N'TABLE', @level1name = N'UserPrivilege', @level2type = N'COLUMN', @level2name = N'PrivilegeID';


GO

SET DATEFORMAT ymd
SET ARITHABORT, ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER, ANSI_NULLS, NOCOUNT ON
SET NUMERIC_ROUNDABORT, IMPLICIT_TRANSACTIONS, XACT_ABORT OFF
GO

MERGE INTO CONF.PrivelegeGroup t1 USING (SELECT 1 id) t2 ON (t1.ID = 1)
WHEN MATCHED THEN UPDATE  SET Code = N'ADM', Name = N'Администрирование', Description = NULL
WHEN NOT MATCHED THEN INSERT (ID, Code, Name, Description) VALUES (1, N'ADM', N'Администрирование', NULL);
MERGE INTO CONF.PrivelegeGroup t1 USING (SELECT 1 id) t2 ON (t1.ID = 2)
WHEN MATCHED THEN UPDATE  SET Code = N'CONF', Name = N'Конфигурация', Description = NULL
WHEN NOT MATCHED THEN INSERT (ID, Code, Name, Description) VALUES (2, N'CONF', N'Конфигурация', NULL);
MERGE INTO CONF.PrivelegeGroup t1 USING (SELECT 1 id) t2 ON (t1.ID = 3)
WHEN MATCHED THEN UPDATE  SET Code = N'USER', Name = N'Пользователи', Description = NULL
WHEN NOT MATCHED THEN INSERT (ID, Code, Name, Description) VALUES (3, N'USER', N'Пользователи', NULL);
MERGE INTO CONF.PrivelegeGroup t1 USING (SELECT 1 id) t2 ON (t1.ID = 4)
WHEN MATCHED THEN UPDATE  SET Code = N'STAFF', Name = N'Персонал', Description = NULL
WHEN NOT MATCHED THEN INSERT (ID, Code, Name, Description) VALUES (4, N'STAFF', N'Персонал', NULL);
MERGE INTO CONF.PrivelegeGroup t1 USING (SELECT 1 id) t2 ON (t1.ID = 5)
WHEN MATCHED THEN UPDATE  SET Code = N'CST', Name = N'Клиент', Description = NULL
WHEN NOT MATCHED THEN INSERT (ID, Code, Name, Description) VALUES (5, N'CST', N'Клиент', NULL);
MERGE INTO CONF.PrivelegeGroup t1 USING (SELECT 1 id) t2 ON (t1.ID = 6)
WHEN MATCHED THEN UPDATE  SET Code = N'FIN', Name = N'Финансовые операции', Description = NULL
WHEN NOT MATCHED THEN INSERT (ID, Code, Name, Description) VALUES (6, N'FIN', N'Финансовые операции', NULL);
GO

MERGE INTO ADM.Privilege t1 USING (SELECT 1 id) t2 ON (t1.ID = 1)
WHEN MATCHED THEN UPDATE  SET Name = N'Login', Description = N'Запуск консоли', GroupID = 1
WHEN NOT MATCHED THEN INSERT (ID, Name, Description, GroupID) VALUES (1, N'Login', N'Запуск консоли', 1);
MERGE INTO ADM.Privilege t1 USING (SELECT 1 id) t2 ON (t1.ID = 20)
WHEN MATCHED THEN UPDATE  SET Name = N'ViewConfiguration', Description = N'Просмотр конфигурационных таблиц и справочников', GroupID = 2
WHEN NOT MATCHED THEN INSERT (ID, Name, Description, GroupID) VALUES (20, N'ViewConfiguration', N'Просмотр конфигурационных таблиц и справочников', 2);
MERGE INTO ADM.Privilege t1 USING (SELECT 1 id) t2 ON (t1.ID = 21)
WHEN MATCHED THEN UPDATE  SET Name = N'ModifyConfiguration', Description = N'Изменение данных конфигурационных таблиц и справочников', GroupID = 2
WHEN NOT MATCHED THEN INSERT (ID, Name, Description, GroupID) VALUES (21, N'ModifyConfiguration', N'Изменение данных конфигурационных таблиц и справочников', 2);
MERGE INTO ADM.Privilege t1 USING (SELECT 1 id) t2 ON (t1.ID = 31)
WHEN MATCHED THEN UPDATE  SET Name = N'CreateCumulativeDiscount', Description = N'Создание накопительных дисконтов', GroupID = 2
WHEN NOT MATCHED THEN INSERT (ID, Name, Description, GroupID) VALUES (31, N'CreateCumulativeDiscount', N'Создание накопительных дисконтов', 2);
MERGE INTO ADM.Privilege t1 USING (SELECT 1 id) t2 ON (t1.ID = 32)
WHEN MATCHED THEN UPDATE  SET Name = N'ModifyCumulativeDiscount', Description = N'Изменение накопительных дисконтов', GroupID = 2
WHEN NOT MATCHED THEN INSERT (ID, Name, Description, GroupID) VALUES (32, N'ModifyCumulativeDiscount', N'Изменение накопительных дисконтов', 2);
MERGE INTO ADM.Privilege t1 USING (SELECT 1 id) t2 ON (t1.ID = 33)
WHEN MATCHED THEN UPDATE  SET Name = N'DeleteCumulativeDiscount', Description = N'Удаление накопительных скидок', GroupID = 1
WHEN NOT MATCHED THEN INSERT (ID, Name, Description, GroupID) VALUES (33, N'DeleteCumulativeDiscount', N'Удаление накопительных скидок', 1);
MERGE INTO ADM.Privilege t1 USING (SELECT 1 id) t2 ON (t1.ID = 100)
WHEN MATCHED THEN UPDATE  SET Name = N'ViewUser', Description = N'Просмотр данных пользователей системы', GroupID = 3
WHEN NOT MATCHED THEN INSERT (ID, Name, Description, GroupID) VALUES (100, N'ViewUser', N'Просмотр данных пользователей системы', 3);
MERGE INTO ADM.Privilege t1 USING (SELECT 1 id) t2 ON (t1.ID = 101)
WHEN MATCHED THEN UPDATE  SET Name = N'CreateUser', Description = N'Создание новых пользователей системы', GroupID = 3
WHEN NOT MATCHED THEN INSERT (ID, Name, Description, GroupID) VALUES (101, N'CreateUser', N'Создание новых пользователей системы', 3);
MERGE INTO ADM.Privilege t1 USING (SELECT 1 id) t2 ON (t1.ID = 102)
WHEN MATCHED THEN UPDATE  SET Name = N'ModifyUser', Description = N'Изменение личных данных пользователей системы', GroupID = 3
WHEN NOT MATCHED THEN INSERT (ID, Name, Description, GroupID) VALUES (102, N'ModifyUser', N'Изменение личных данных пользователей системы', 3);
MERGE INTO ADM.Privilege t1 USING (SELECT 1 id) t2 ON (t1.ID = 103)
WHEN MATCHED THEN UPDATE  SET Name = N'DeleteUser', Description = N'Удаление пользователя', GroupID = 2
WHEN NOT MATCHED THEN INSERT (ID, Name, Description, GroupID) VALUES (103, N'DeleteUser', N'Удаление пользователя', 2);
MERGE INTO ADM.Privilege t1 USING (SELECT 1 id) t2 ON (t1.ID = 111)
WHEN MATCHED THEN UPDATE  SET Name = N'ModifySystemUser', Description = N'Редактирование системных пользователей', GroupID = 3
WHEN NOT MATCHED THEN INSERT (ID, Name, Description, GroupID) VALUES (111, N'ModifySystemUser', N'Редактирование системных пользователей', 3);
MERGE INTO ADM.Privilege t1 USING (SELECT 1 id) t2 ON (t1.ID = 150)
WHEN MATCHED THEN UPDATE  SET Name = N'GrantPrivelege', Description = N'Управление правами пользователей', GroupID = 3
WHEN NOT MATCHED THEN INSERT (ID, Name, Description, GroupID) VALUES (150, N'GrantPrivelege', N'Управление правами пользователей', 3);
MERGE INTO ADM.Privilege t1 USING (SELECT 1 id) t2 ON (t1.ID = 200)
WHEN MATCHED THEN UPDATE  SET Name = N'VIewStaff', Description = N'Просмотр личных карточек сотрудников', GroupID = 4
WHEN NOT MATCHED THEN INSERT (ID, Name, Description, GroupID) VALUES (200, N'VIewStaff', N'Просмотр личных карточек сотрудников', 4);
MERGE INTO ADM.Privilege t1 USING (SELECT 1 id) t2 ON (t1.ID = 201)
WHEN MATCHED THEN UPDATE  SET Name = N'CreateStaff', Description = N'Создание личных карточек персонала', GroupID = 4
WHEN NOT MATCHED THEN INSERT (ID, Name, Description, GroupID) VALUES (201, N'CreateStaff', N'Создание личных карточек персонала', 4);
MERGE INTO ADM.Privilege t1 USING (SELECT 1 id) t2 ON (t1.ID = 202)
WHEN MATCHED THEN UPDATE  SET Name = N'ModifyStaff', Description = N'Редактирование личных карточек персонала', GroupID = 4
WHEN NOT MATCHED THEN INSERT (ID, Name, Description, GroupID) VALUES (202, N'ModifyStaff', N'Редактирование личных карточек персонала', 4);
MERGE INTO ADM.Privilege t1 USING (SELECT 1 id) t2 ON (t1.ID = 203)
WHEN MATCHED THEN UPDATE  SET Name = N'DeleteStaff', Description = N'Удаление сотрудника', GroupID = 3
WHEN NOT MATCHED THEN INSERT (ID, Name, Description, GroupID) VALUES (203, N'DeleteStaff', N'Удаление сотрудника', 3);
MERGE INTO ADM.Privilege t1 USING (SELECT 1 id) t2 ON (t1.ID = 300)
WHEN MATCHED THEN UPDATE  SET Name = N'ViewCustomer', Description = N'Просмотр клиентов', GroupID = 5
WHEN NOT MATCHED THEN INSERT (ID, Name, Description, GroupID) VALUES (300, N'ViewCustomer', N'Просмотр клиентов', 5);
MERGE INTO ADM.Privilege t1 USING (SELECT 1 id) t2 ON (t1.ID = 301)
WHEN MATCHED THEN UPDATE  SET Name = N'CreateCustomer', Description = N'Создание клиентов', GroupID = 5
WHEN NOT MATCHED THEN INSERT (ID, Name, Description, GroupID) VALUES (301, N'CreateCustomer', N'Создание клиентов', 5);
MERGE INTO ADM.Privilege t1 USING (SELECT 1 id) t2 ON (t1.ID = 302)
WHEN MATCHED THEN UPDATE  SET Name = N'ModifyCustomer', Description = N'Изменение клиентов', GroupID = 5
WHEN NOT MATCHED THEN INSERT (ID, Name, Description, GroupID) VALUES (302, N'ModifyCustomer', N'Изменение клиентов', 5);
MERGE INTO ADM.Privilege t1 USING (SELECT 1 id) t2 ON (t1.ID = 303)
WHEN MATCHED THEN UPDATE  SET Name = N'DeleteCustomer', Description = N'Удаление клиента', GroupID = 4
WHEN NOT MATCHED THEN INSERT (ID, Name, Description, GroupID) VALUES (303, N'DeleteCustomer', N'Удаление клиента', 4);
MERGE INTO ADM.Privilege t1 USING (SELECT 1 id) t2 ON (t1.ID = 310)
WHEN MATCHED THEN UPDATE  SET Name = N'LinkDiscountCard', Description = N'Создание дисконтных карт', GroupID = 5
WHEN NOT MATCHED THEN INSERT (ID, Name, Description, GroupID) VALUES (310, N'LinkDiscountCard', N'Создание дисконтных карт', 5);
MERGE INTO ADM.Privilege t1 USING (SELECT 1 id) t2 ON (t1.ID = 311)
WHEN MATCHED THEN UPDATE  SET Name = N'ModifyDiscontCard', Description = N'Изменение дисконтных карт', GroupID = 5
WHEN NOT MATCHED THEN INSERT (ID, Name, Description, GroupID) VALUES (311, N'ModifyDiscontCard', N'Изменение дисконтных карт', 5);
MERGE INTO ADM.Privilege t1 USING (SELECT 1 id) t2 ON (t1.ID = 312)
WHEN MATCHED THEN UPDATE  SET Name = N'UnlinkDiscountCard', Description = N'Удаление дисконтной карты', GroupID = 5
WHEN NOT MATCHED THEN INSERT (ID, Name, Description, GroupID) VALUES (312, N'UnlinkDiscountCard', N'Удаление дисконтной карты', 5);
MERGE INTO ADM.Privilege t1 USING (SELECT 1 id) t2 ON (t1.ID = 320)
WHEN MATCHED THEN UPDATE  SET Name = N'ViewAppointment', Description = N'Просмотр событий', GroupID = 5
WHEN NOT MATCHED THEN INSERT (ID, Name, Description, GroupID) VALUES (320, N'ViewAppointment', N'Просмотр событий', 5);
MERGE INTO ADM.Privilege t1 USING (SELECT 1 id) t2 ON (t1.ID = 321)
WHEN MATCHED THEN UPDATE  SET Name = N'CreateAppointment', Description = N'Создание событий', GroupID = 5
WHEN NOT MATCHED THEN INSERT (ID, Name, Description, GroupID) VALUES (321, N'CreateAppointment', N'Создание событий', 5);
MERGE INTO ADM.Privilege t1 USING (SELECT 1 id) t2 ON (t1.ID = 322)
WHEN MATCHED THEN UPDATE  SET Name = N'ModifyAppointment', Description = N'Редактирование событий', GroupID = 5
WHEN NOT MATCHED THEN INSERT (ID, Name, Description, GroupID) VALUES (322, N'ModifyAppointment', N'Редактирование событий', 5);
MERGE INTO ADM.Privilege t1 USING (SELECT 1 id) t2 ON (t1.ID = 323)
WHEN MATCHED THEN UPDATE  SET Name = N'DeleteAppointment', Description = N'Удаление визитов', GroupID = 5
WHEN NOT MATCHED THEN INSERT (ID, Name, Description, GroupID) VALUES (323, N'DeleteAppointment', N'Удаление визитов', 5);
MERGE INTO ADM.Privilege t1 USING (SELECT 1 id) t2 ON (t1.ID = 350)
WHEN MATCHED THEN UPDATE  SET Name = N'SetCustomDiscount', Description = N'Устанавливать произвольный дисконт', GroupID = 5
WHEN NOT MATCHED THEN INSERT (ID, Name, Description, GroupID) VALUES (350, N'SetCustomDiscount', N'Устанавливать произвольный дисконт', 5);
MERGE INTO ADM.Privilege t1 USING (SELECT 1 id) t2 ON (t1.ID = 400)
WHEN MATCHED THEN UPDATE  SET Name = N'ViewFinancialTransaction', Description = N'Просмотр финансовых операций', GroupID = 6
WHEN NOT MATCHED THEN INSERT (ID, Name, Description, GroupID) VALUES (400, N'ViewFinancialTransaction', N'Просмотр финансовых операций', 6);
MERGE INTO ADM.Privilege t1 USING (SELECT 1 id) t2 ON (t1.ID = 401)
WHEN MATCHED THEN UPDATE  SET Name = N'CreateFinancialTransaction', Description = N'Создание финансовой операции', GroupID = 6
WHEN NOT MATCHED THEN INSERT (ID, Name, Description, GroupID) VALUES (401, N'CreateFinancialTransaction', N'Создание финансовой операции', 6);
MERGE INTO ADM.Privilege t1 USING (SELECT 1 id) t2 ON (t1.ID = 402)
WHEN MATCHED THEN UPDATE  SET Name = N'ModifyFinancialTransaction', Description = N'Изменение финансовой операции', GroupID = 6
WHEN NOT MATCHED THEN INSERT (ID, Name, Description, GroupID) VALUES (402, N'ModifyFinancialTransaction', N'Изменение финансовой операции', 6);
MERGE INTO ADM.Privilege t1 USING (SELECT 1 id) t2 ON (t1.ID = 403)
WHEN MATCHED THEN UPDATE  SET Name = N'DeleteFinancialTransaction', Description = N'Удаление финансовой операции', GroupID = 6
WHEN NOT MATCHED THEN INSERT (ID, Name, Description, GroupID) VALUES (403, N'DeleteFinancialTransaction', N'Удаление финансовой операции', 6);
GO


SET IDENTITY_INSERT ADM.[User] ON
GO
MERGE INTO ADM.[User] t1 USING (SELECT 1 id) t2 ON (t1.ID = 5)
WHEN MATCHED THEN UPDATE  SET Login = N'sysdba', Password = N'2B23880480BCC13E69C0FAC5CF09832C', Email = NULL, ExpirationDate = NULL, IsSystem = CONVERT(bit, 'True')
WHEN NOT MATCHED THEN INSERT (ID, Login, Password, Email, ExpirationDate, IsSystem) VALUES (5, N'sysdba', N'2B23880480BCC13E69C0FAC5CF09832C', NULL, NULL, CONVERT(bit, 'True'));
MERGE INTO ADM.[User] t1 USING (SELECT 1 id) t2 ON (t1.ID = 8)
WHEN MATCHED THEN UPDATE  SET Login = N'administrator', Password = N'200CEB26807D6BF99FD6F4F0D1CA54D4', Email = NULL, ExpirationDate = NULL, IsSystem = CONVERT(bit, 'False')
WHEN NOT MATCHED THEN INSERT (ID, Login, Password, Email, ExpirationDate, IsSystem) VALUES (8, N'administrator', N'200CEB26807D6BF99FD6F4F0D1CA54D4', NULL, NULL, CONVERT(bit, 'False'));
GO
SET IDENTITY_INSERT ADM.[User] OFF
GO

MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 5 AND PrivilegeID = 1)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (5, 1);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 8 AND PrivilegeID = 1)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (8, 1);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 5 AND PrivilegeID = 20)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (5, 20);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 8 AND PrivilegeID = 20)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (8, 20);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 5 AND PrivilegeID = 21)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (5, 21);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 8 AND PrivilegeID = 21)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (8, 21);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 5 AND PrivilegeID = 31)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (5, 31);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 8 AND PrivilegeID = 31)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (8, 31);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 5 AND PrivilegeID = 32)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (5, 32);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 8 AND PrivilegeID = 32)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (8, 32);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 5 AND PrivilegeID = 33)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (5, 33);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 8 AND PrivilegeID = 33)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (8, 33);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 5 AND PrivilegeID = 100)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (5, 100);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 8 AND PrivilegeID = 100)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (8, 100);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 5 AND PrivilegeID = 101)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (5, 101);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 8 AND PrivilegeID = 101)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (8, 101);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 5 AND PrivilegeID = 102)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (5, 102);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 8 AND PrivilegeID = 102)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (8, 102);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 5 AND PrivilegeID = 103)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (5, 103);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 8 AND PrivilegeID = 103)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (8, 103);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 5 AND PrivilegeID = 111)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (5, 111);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 5 AND PrivilegeID = 150)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (5, 150);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 8 AND PrivilegeID = 150)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (8, 150);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 5 AND PrivilegeID = 200)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (5, 200);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 8 AND PrivilegeID = 200)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (8, 200);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 5 AND PrivilegeID = 201)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (5, 201);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 8 AND PrivilegeID = 201)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (8, 201);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 5 AND PrivilegeID = 202)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (5, 202);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 8 AND PrivilegeID = 202)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (8, 202);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 5 AND PrivilegeID = 203)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (5, 203);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 8 AND PrivilegeID = 203)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (8, 203);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 5 AND PrivilegeID = 300)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (5, 300);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 8 AND PrivilegeID = 300)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (8, 300);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 5 AND PrivilegeID = 301)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (5, 301);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 8 AND PrivilegeID = 301)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (8, 301);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 5 AND PrivilegeID = 302)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (5, 302);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 8 AND PrivilegeID = 302)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (8, 302);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 5 AND PrivilegeID = 303)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (5, 303);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 8 AND PrivilegeID = 303)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (8, 303);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 5 AND PrivilegeID = 310)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (5, 310);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 8 AND PrivilegeID = 310)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (8, 310);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 5 AND PrivilegeID = 311)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (5, 311);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 8 AND PrivilegeID = 311)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (8, 311);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 5 AND PrivilegeID = 312)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (5, 312);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 8 AND PrivilegeID = 312)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (8, 312);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 5 AND PrivilegeID = 320)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (5, 320);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 8 AND PrivilegeID = 320)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (8, 320);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 5 AND PrivilegeID = 321)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (5, 321);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 8 AND PrivilegeID = 321)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (8, 321);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 5 AND PrivilegeID = 322)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (5, 322);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 8 AND PrivilegeID = 322)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (8, 322);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 5 AND PrivilegeID = 323)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (5, 323);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 8 AND PrivilegeID = 323)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (8, 323);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 5 AND PrivilegeID = 350)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (5, 350);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 8 AND PrivilegeID = 350)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (8, 350);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 5 AND PrivilegeID = 400)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (5, 400);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 8 AND PrivilegeID = 400)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (8, 400);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 5 AND PrivilegeID = 401)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (5, 401);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 8 AND PrivilegeID = 401)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (8, 401);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 5 AND PrivilegeID = 402)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (5, 402);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 8 AND PrivilegeID = 402)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (8, 402);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 5 AND PrivilegeID = 403)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (5, 403);
MERGE INTO ADM.UserPrivilege t1 USING (SELECT 1 id) t2 ON (t1.UserID = 8 AND PrivilegeID = 403)
WHEN NOT MATCHED THEN INSERT (UserID, PrivilegeID) VALUES (8, 403);
GO

MERGE INTO CONF.AppointmentState t1 USING (SELECT 1 id) t2 ON (t1.ID = 2)
WHEN MATCHED THEN UPDATE  SET Code = N'Active', Name = N'Активный', Description = NULL
WHEN NOT MATCHED THEN INSERT (ID, Code, Name, Description) VALUES (2, N'Active', N'Активный', NULL);
MERGE INTO CONF.AppointmentState t1 USING (SELECT 1 id) t2 ON (t1.ID = 3)
WHEN MATCHED THEN UPDATE  SET Code = N'Canceled', Name = N'Отмененный', Description = NULL
WHEN NOT MATCHED THEN INSERT (ID, Code, Name, Description) VALUES (3, N'Canceled', N'Отмененный', NULL);
MERGE INTO CONF.AppointmentState t1 USING (SELECT 1 id) t2 ON (t1.ID = 4)
WHEN MATCHED THEN UPDATE  SET Code = N'Completed', Name = N'Выполнен', Description = NULL
WHEN NOT MATCHED THEN INSERT (ID, Code, Name, Description) VALUES (4, N'Completed', N'Выполнен', NULL);
GO

MERGE INTO CONF.DiscountType t1 USING (SELECT 1 id) t2 ON (t1.ID = 1)
WHEN MATCHED THEN UPDATE  SET Code = N'Cumulative', Name = N'Накопительная скидка', Description = NULL
WHEN NOT MATCHED THEN INSERT (ID, Code, Name, Description) VALUES (1, N'Cumulative', N'Накопительная скидка', NULL);
GO


SET IDENTITY_INSERT CONF.TransactionType ON
GO
MERGE INTO CONF.TransactionType t1 USING (SELECT 1 id) t2 ON (t1.ID = 1)
WHEN MATCHED THEN UPDATE  SET Code = N'Deposit', Name = N'Пополнение', Description = NULL, OperationSign = 1
WHEN NOT MATCHED THEN INSERT (ID, Code, Name, Description, OperationSign) VALUES (1, N'Deposit', N'Пополнение', NULL, 1);
MERGE INTO CONF.TransactionType t1 USING (SELECT 1 id) t2 ON (t1.ID = 2)
WHEN MATCHED THEN UPDATE  SET Code = N'Withdrawal', Name = N'Списание', Description = NULL, OperationSign = -1
WHEN NOT MATCHED THEN INSERT (ID, Code, Name, Description, OperationSign) VALUES (2, N'Withdrawal', N'Списание', NULL, -1);
GO
SET IDENTITY_INSERT CONF.TransactionType OFF
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion &amp; 0xffff &gt;= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion &amp; 0xffff &gt;= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported &gt; 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'CRM', 'ON';
    END


GO
ALTER DATABASE [CRM]
    SET MULTI_USER 
    WITH ROLLBACK IMMEDIATE;

GO

PRINT N'Update complete.';


GO</value>
  </data>
  <data name="v_1_0_0_1" xml:space="preserve">
    <value>use CRM
go

PRINT N'Altering CONF.GetCumulativeDiscountID...';
go

alter FUNCTION CONF.GetCumulativeDiscountID(@discountCardID int)
returns int
begin
    declare @result int;
    with discounts
        as (select cd.ID,
                   cd.PurchaseTopLimit, 
                   row_number() over (order by cd.PurchaseTopLimit) RowNumber
              from (select ID,
                           PurchaseTopLimit
                      from CONF.CumulativeDiscount
                    union all
                    select top 1
                           ID,
                           99999999999999
                      from CONF.CumulativeDiscount
                     where PurchaseTopLimit = (select max(PurchaseTopLimit)
                                                 from CONF.CumulativeDiscount)) cd
             where 1 = 1),
         discountQuant 
        as (select d1.ID, 
                   isnull(d2.PurchaseTopLimit, 0) as PurchaseTopLimitFrom,
                   d1.PurchaseTopLimit as PurchaseTopLimitTo
              from discounts d1
                   left outer join discounts d2
                on d2.RowNumber = d1.RowNumber - 1
             where 1 = 1)
    select top 1 
           @result = dq.ID
      from CST.DiscountCard dc
           inner join discountQuant dq
        on (dc.TotalPurchaseValue &gt;= dq.PurchaseTopLimitFrom
            and dc.TotalPurchaseValue &lt; dq.PurchaseTopLimitTo)
     where dc.ID = @discountCardID
     order by dq.PurchaseTopLimitTo desc
    
    return @result;
end;
go

PRINT N'Update complete.';
go</value>
  </data>
  <data name="v_1_0_0_2" xml:space="preserve">
    <value>use CRM
go

PRINT N'Altering CST.DiscountCard...';
go

alter table CST.DiscountCard add FixedDiscount bit not null default 0
go

PRINT N'Altering CST.CreateFinancialTransaction...';
go

alter PROCEDURE CST.CreateFinancialTransaction
    @userID int,
    @transactionTypeID int,
    @customerID int,
    @appointmentID int,
    @amount decimal(13, 2),
    @comment nvarchar(4000)
AS 
begin
    declare @id int,
            @discountCardID int,
            @discountType int,
            @totalPurchaseValue decimal(13, 2),
            @now datetime,
            @message nvarchar(4000),
            @isFixedDiscount bit;
    set @now = getdate();
    begin transaction;
    begin try
        insert into CST.FinancialTransaction 
            (CustomerID, AppointmentID, TransactionTypeID, Amount, Comment, CreationTIme, CreatedBy)
        values 
            (@customerID, @appointmentID, @transactionTypeID, @amount, @comment, getdate(), @userID);
        set @id = scope_identity();
        if(exists(select 1 /* РѕРїРµСЂР°С†РёСЏ СѓРІРµР»РёС‡РёРІР°РµС‚ Р±Р°Р»Р°РЅСЃ */
                    from CONF.TransactionType tt
                   where tt.OperationSign = 1
                     and tt.ID = @transactionTypeID)
           and exists(select 1 /* РєР»РёРµРЅС‚ РёРјРµРµС‚ РґРёСЃРєРѕРЅС‚РЅСѓСЋ РєР°СЂС‚Сѓ */
                        from CST.DiscountCard dc 
                             inner join CST.Customer c 
                          on dc.ID = c.DiscountCardID
                       where c.ID = @customerID))
        begin
            select @discountCardID = dc.ID,
                   @discountType = dc.DiscountTypeID,
                   @isFixedDiscount = dc.FixedDiscount
              from CST.DiscountCard dc 
                   inner join CST.Customer c 
                on dc.ID = c.DiscountCardID
             where c.ID = @customerID;

                select @totalPurchaseValue = sum(ft.Amount)
                  from CST.Customer c
                       inner join CST.FinancialTransaction ft
                    on ft.CustomerID = c.ID
                       inner join CONF.TransactionType tt 
                    on (ft.TransactionTypeID = tt.ID
                        and tt.OperationSign = 1) 
                 where c.DiscountCardID = @discountCardID;

                update CST.DiscountCard
                   set TotalPurchaseValue = isnull(@totalPurchaseValue, 0)
                 where ID = @discountCardID;

            if(@isFixedDiscount = 0 
               and @discountType = 1 /* РЅР°РєРѕРїРёС‚РµР»СЊРЅР°СЏ СЃРєРёРґРєР° */)
            begin
                declare @cumulativeDiscountID int;
                set @cumulativeDiscountID = CONF.GetCumulativeDiscountID(@discountCardID);
                
                update dc
                   set dc.DiscountPercent = isnull(cd.[Percent], dc.DiscountPercent),
                       dc.MinDiscount = isnull(cd.MinDiscount, dc.MinDiscount),
                       dc.MaxDiscount = isnull(cd.MaxDiscount, dc.MaxDiscount)
                  from CST.DiscountCard dc
                       left outer join CONF.CumulativeDiscount cd
                    on (@cumulativeDiscountID is not null 
                        and cd.ID = @cumulativeDiscountID)
                 where dc.ID = @discountCardID;                
            end;
        end;
        commit;
    end try
    begin catch
        set @message = error_message();
        rollback;
        raiserror(@message, 16, 1);
    end catch;
    
    select  ft.ID,
            ft.CustomerID,
            ft.AppointmentID,
            ft.TransactionTypeID,
            ft.Amount,
            ft.Comment,
            ft.CreationTime,
            ft.CreatedBy,
            ft.ModificationTime,
            ft.ModifiedBy
      from CST.FinancialTransaction ft 
     where ft.ID = @id;
end
GO

PRINT N'Altering CST.DeleteFinancialTransaction...';
go

alter PROCEDURE CST.DeleteFinancialTransaction
    @id int
AS 
begin
    begin transaction;
    begin try
        declare @transactionTypeID int,
                @customerID int,
                @message nvarchar(4000);
        
        select @transactionTypeID = ft.TransactionTypeID,
               @customerID = ft.CustomerID
          from CST.FinancialTransaction ft
         where ID = @id;

        delete from CST.FinancialTransaction 
         where ID = @id
            
        if(exists(select 1 /* РѕРїРµСЂР°С†РёСЏ СѓРІРµР»РёС‡РёРІР°РµС‚ Р±Р°Р»Р°РЅСЃ */
                    from CONF.TransactionType tt
                   where tt.OperationSign = 1
                     and tt.ID = @transactionTypeID)
           and exists(select 1 /* РєР»РёРµРЅС‚ РёРјРµРµС‚ РґРёСЃРєРѕРЅС‚РЅСѓСЋ РєР°СЂС‚Сѓ */
                        from CST.DiscountCard dc 
                             inner join CST.Customer c 
                          on dc.ID = c.DiscountCardID
                       where c.ID = @customerID))
        begin
            declare @discountCardID int,
                    @discountType int,
                    @totalPurchaseValue decimal(13,2),
                    @isFixedDiscount bit;

            select @discountCardID = dc.ID,
                   @discountType = dc.DiscountTypeID,
                   @isFixedDiscount = dc.FixedDiscount
              from CST.DiscountCard dc 
                   inner join CST.Customer c 
                on dc.ID = c.DiscountCardID
             where c.ID = @customerID;

            select @totalPurchaseValue = sum(ft.Amount)
              from CST.Customer c
                   inner join CST.FinancialTransaction ft
                on ft.CustomerID = c.ID
                   inner join CONF.TransactionType tt 
                on (ft.TransactionTypeID = tt.ID
                    and tt.OperationSign = 1) 
             where c.DiscountCardID = @discountCardID;

            update CST.DiscountCard
               set TotalPurchaseValue = isnull(@totalPurchaseValue, 0)
             where ID = @discountCardID;

            if(@isFixedDiscount = 0 
               and @discountType = 1 /* РЅР°РєРѕРїРёС‚РµР»СЊРЅР°СЏ СЃРєРёРґРєР° */)
            begin
                declare @cumulativeDiscountID int;
                set @cumulativeDiscountID = CONF.GetCumulativeDiscountID(@discountCardID);
                
                update dc
                   set dc.DiscountPercent = isnull(cd.[Percent], dc.DiscountPercent),
                       dc.MinDiscount = isnull(cd.MinDiscount, dc.MinDiscount),
                       dc.MaxDiscount = isnull(cd.MaxDiscount, dc.MaxDiscount)
                  from CST.DiscountCard dc
                       left outer join CONF.CumulativeDiscount cd
                    on (@cumulativeDiscountID is not null 
                        and cd.ID = @cumulativeDiscountID)
                 where dc.ID = @discountCardID;                
            end;
        end;
        commit;
    end try
    begin catch
        set @message = error_message();
        rollback;
        raiserror(@message, 16, 1);
    end catch;
end
GO

PRINT N'Altering CST.UpdateFinancialTransaction...';
go

alter PROCEDURE CST.UpdateFinancialTransaction
    @id int,
    @userID int,
    @transactionTypeID int,
    @customerID int,
    @appointmentID int,
    @amount decimal(13, 2),
    @comment nvarchar(4000)
AS 
begin
    begin transaction;
    begin try
        declare @message nvarchar(4000);
        
        select @transactionTypeID = ft.TransactionTypeID,
               @customerID = ft.CustomerID
          from CST.FinancialTransaction ft
         where ID = @id;

        update CST.FinancialTransaction 
           set CustomerID = @customerID,
               TransactionTypeID = @transactionTypeID,
               AppointmentID = @appointmentID,
               Amount = @amount,
               Comment = @comment,
               ModifiedBy = @userID,
               ModificationTime = getdate() 
         where ID = @id;
            
        if(exists(select 1 /* РѕРїРµСЂР°С†РёСЏ СѓРІРµР»РёС‡РёРІР°РµС‚ Р±Р°Р»Р°РЅСЃ */
                    from CONF.TransactionType tt
                   where tt.OperationSign = 1
                     and tt.ID = @transactionTypeID)
           and exists(select 1 /* РєР»РёРµРЅС‚ РёРјРµРµС‚ РґРёСЃРєРѕРЅС‚РЅСѓСЋ РєР°СЂС‚Сѓ */
                        from CST.DiscountCard dc 
                             inner join CST.Customer c 
                          on dc.ID = c.DiscountCardID
                       where c.ID = @customerID))
        begin
            declare @discountCardID int,
                    @discountType int,
                    @totalPurchaseValue decimal(13,2),
                    @isFixedDiscount bit;

            select @discountCardID = dc.ID,
                   @discountType = dc.DiscountTypeID,
                   @isFixedDiscount = dc.FixedDiscount
              from CST.DiscountCard dc 
                   inner join CST.Customer c 
                on dc.ID = c.DiscountCardID
             where c.ID = @customerID;

            select @totalPurchaseValue = sum(ft.Amount)
              from CST.Customer c
                   inner join CST.FinancialTransaction ft
                on ft.CustomerID = c.ID
                   inner join CONF.TransactionType tt 
                on (ft.TransactionTypeID = tt.ID
                    and tt.OperationSign = 1) 
             where c.DiscountCardID = @discountCardID;

            update CST.DiscountCard
               set TotalPurchaseValue = isnull(@totalPurchaseValue, 0)
             where ID = @discountCardID;

            if(@isFixedDiscount = 0 
               and @discountType = 1 /* РЅР°РєРѕРїРёС‚РµР»СЊРЅР°СЏ СЃРєРёРґРєР° */)
            begin
                declare @cumulativeDiscountID int;
                set @cumulativeDiscountID = CONF.GetCumulativeDiscountID(@discountCardID);
                
                update dc
                   set dc.DiscountPercent = isnull(cd.[Percent], dc.DiscountPercent),
                       dc.MinDiscount = isnull(cd.MinDiscount, dc.MinDiscount),
                       dc.MaxDiscount = isnull(cd.MaxDiscount, dc.MaxDiscount)
                  from CST.DiscountCard dc
                       left outer join CONF.CumulativeDiscount cd
                    on (@cumulativeDiscountID is not null 
                        and cd.ID = @cumulativeDiscountID)
                 where dc.ID = @discountCardID;                
            end;
        end;
        commit;
    end try
    begin catch
        set @message = error_message();
        rollback;
        raiserror(@message, 16, 1);
    end catch;

    select  ft.ID,
            ft.CustomerID,
            ft.AppointmentID,
            ft.TransactionTypeID,
            ft.Amount,
            ft.Comment,
            ft.CreationTime,
            ft.CreatedBy,
            ft.ModificationTime,
            ft.ModifiedBy 
      from CST.FinancialTransaction ft
     where ft.ID = @id;
end
GO

PRINT N'Creating CST.RecalculateDiscount...';
go

CREATE PROCEDURE CST.RecalculateDiscount
    @discountCardID int
AS 
begin
    begin transaction;
    begin try
        declare @customerID int,
                @discountType int,
                @totalPurchaseValue decimal(13,2),
                @isFixedDiscount bit;

        select @discountType = dc.DiscountTypeID,
               @isFixedDiscount = dc.FixedDiscount,
               @customerID = c.ID
          from CST.DiscountCard dc 
               inner join CST.Customer c 
            on dc.ID = c.DiscountCardID
         where dc.ID = @discountCardID;

        select @totalPurchaseValue = sum(ft.Amount)
          from CST.Customer c
               inner join CST.FinancialTransaction ft
            on ft.CustomerID = c.ID
               inner join CONF.TransactionType tt 
            on (ft.TransactionTypeID = tt.ID
                and tt.OperationSign = 1) 
         where c.DiscountCardID = @discountCardID;

        update CST.DiscountCard
           set TotalPurchaseValue = isnull(@totalPurchaseValue, 0)
         where ID = @discountCardID;

        if(@isFixedDiscount = 0 
           and @discountType = 1 /* РЅР°РєРѕРїРёС‚РµР»СЊРЅР°СЏ СЃРєРёРґРєР° */)
        begin
            declare @cumulativeDiscountID int;
            set @cumulativeDiscountID = CONF.GetCumulativeDiscountID(@discountCardID);
            
            update dc
               set dc.DiscountPercent = isnull(cd.[Percent], dc.DiscountPercent),
                   dc.MinDiscount = isnull(cd.MinDiscount, dc.MinDiscount),
                   dc.MaxDiscount = isnull(cd.MaxDiscount, dc.MaxDiscount)
              from CST.DiscountCard dc
                   left outer join CONF.CumulativeDiscount cd
                on (@cumulativeDiscountID is not null 
                    and cd.ID = @cumulativeDiscountID)
             where dc.ID = @discountCardID;                
        end;
        commit;

        select dc.ID,
               dc.Code,
               dc.DiscountPercent,
               dc.TotalPurchaseValue,
               dc.DiscountTypeID,
               dc.MinDiscount,
               dc.MaxDiscount,
               dc.FixedDiscount
          from CST.DiscountCard dc
         where dc.ID = @discountCardID;

    end try
    begin catch
        declare @message nvarchar(max) = error_message();
        rollback;
        raiserror(@message, 16, 1);
    end catch;
end
GO

PRINT N'Grant privileges on CST.RecalculateDiscount...';
go
grant execute on CST.RecalculateDiscount to AppUser
go

PRINT N'Update complete.';
go</value>
  </data>
  <data name="v_1_1_0_2" xml:space="preserve">
    <value>use CRM
go

insert into ADM.Privilege (ID, Name, Description, GroupID)
values (34, 'CreateService', 'Создание услуги', 2),
       (35, 'ModifyService', 'Изменение услуги', 2),
       (36, 'DeleteService', 'Удаление услуги', 2),
       (37, 'ViewService', 'Просмотр правочника услуги', 2);
go
insert into ADM.UserPrivilege (UserID, PrivilegeID)
values (5, 34),
       (5, 35),
       (5, 36),
       (5, 37),
       (8, 34),
       (8, 35),
       (8, 36),
       (8, 37);
go

alter table CST.DiscountCard add InitialDiscountPercent decimal (4,2) not null default (0)
go
exec sp_addextendedproperty N'MS_Description',
                            N'Признак фиксированной скидки (без пересчета)',
                            'SCHEMA',
                            N'CST',
                            'TABLE',
                            N'DiscountCard',
                            'COLUMN',
                            N'FixedDiscount'
go

exec sp_addextendedproperty N'MS_Description',
                            N'Начальная скидка (устанавливается при ручной корректировки скидки',
                            'SCHEMA',
                            N'CST',
                            'TABLE',
                            N'DiscountCard',
                            'COLUMN',
                            N'InitialDiscountPercent'
go

alter FUNCTION CONF.GetCumulativeDiscountID(@discountCardID int)
returns int
begin
    declare @result int,
            @initialDiscount decimal(4,2);

    select @initialDiscount = dc.InitialDiscountPercent
      from CST.DiscountCard dc
     where dc.ID = @discountCardID;


    with discounts
        as (select cd.ID,
                   cd.PurchaseTopLimit, 
                   cd.[Percent],
                   row_number() over (order by cd.PurchaseTopLimit) RowNumber
              from (select ID,
                           PurchaseTopLimit,
                           [Percent] 
                      from CONF.CumulativeDiscount
                    union all
                    select top 1
                           ID,
                           99999999999999,
                           1
                      from CONF.CumulativeDiscount
                     where PurchaseTopLimit = (select max(PurchaseTopLimit)
                                                 from CONF.CumulativeDiscount)) cd
             where 1 = 1),
         discountQuant 
        as (select d1.ID, 
                   isnull(d2.PurchaseTopLimit, 0) as PurchaseTopLimitFrom,
                   d1.PurchaseTopLimit as PurchaseTopLimitTo,
                   d2.[Percent]
              from discounts d1
                   left outer join discounts d2
                on d2.RowNumber = d1.RowNumber - 1
             where 1 = 1)
    select top 1 
           @result = dq.ID
      from CST.DiscountCard dc
           inner join discountQuant dq
        on (dc.TotalPurchaseValue &gt;= dq.PurchaseTopLimitFrom
            and dc.TotalPurchaseValue &lt; dq.PurchaseTopLimitTo)
     where dc.ID = @discountCardID
     order by dq.PurchaseTopLimitTo desc
    
    if(not exists (select 1 
                     from CONF.CumulativeDiscount cd
                    where cd.ID = @result
                      and cd.[Percent] &gt;= @initialDiscount))
    begin
        select top 1
               @result = 1
          from CONF.CumulativeDiscount cd
         where cd.[Percent] &gt;= @initialDiscount
         order by cd.[Percent];
    end;

    return @result;
end;
GO

alter TRIGGER CST.[TIUD#FinancialTransaction]
    on CST.FinancialTransaction
    after insert, update, delete as
begin
    with balanceChanges
      as (select ft.CustomerID, 
                 sum(tt.OperationSign 
                     * case when ft.IsCanceled = 1
                            then 0
                            else ft.Amount
                       end) as Balance
            from CST.FinancialTransaction ft
                 inner join (select distinct CustomerID 
                               from INSERTED
                              where 1 = 1
                             union
                             select distinct CustomerID 
                               from DELETED
                              where 1 = 1) i
              on ft.CustomerID = i.CustomerID
                 inner join CONF.TransactionType tt
              on tt.ID = ft.TransactionTypeID
           where 1 = 1
           group by ft.CustomerID)
    update c
       set c.MoneyBalance = b.Balance
      from CST.Customer c
           inner join balanceChanges b
        on (c.ID = b.CustomerID)
     where 1 = 1;
   
    if(exists(select 1
                from DELETED d
                     inner join CST.Appointment a
                  on d.AppointmentID = a.ID
               where a.ToPay &gt; isnull((select sum(ft.Amount)
                                         from CST.FinancialTransaction ft
                                        where ft.AppointmentID = d.AppointmentID
                                          and ft.TransactionTypeID = 1
                                          and ft.IsCanceled = 0), 0)))
    begin
        update a
           set a.StateID = 2
          from CST.Appointment a
               inner join DELETED d
            on a.ID = d.AppointmentID
         where 1 = 1;
    end;

end
GO

create table CRM.CONF.Service (
    ID int identity,
    Description nvarchar(4000) not null,
    WorkingMinuts int not null,
    Price decimal(13, 2) not null,
    constraint PK#Service primary key (ID)
) on [PRIMARY]
go

exec sp_addextendedproperty N'MS_Description',
                            N'Справочник услуг',
                            'SCHEMA',
                            N'CONF',
                            'TABLE',
                            N'Service'
go

exec sp_addextendedproperty N'MS_Description',
                            N'ИД услуги',
                            'SCHEMA',
                            N'CONF',
                            'TABLE',
                            N'Service',
                            'COLUMN',
                            N'ID'
go

exec sp_addextendedproperty N'MS_Description',
                            N'Описание',
                            'SCHEMA',
                            N'CONF',
                            'TABLE',
                            N'Service',
                            'COLUMN',
                            N'Description'
go

exec sp_addextendedproperty N'MS_Description',
                            N'Норма времени, мин',
                            'SCHEMA',
                            N'CONF',
                            'TABLE',
                            N'Service',
                            'COLUMN',
                            N'WorkingMinuts'
go

exec sp_addextendedproperty N'MS_Description',
                            N'Стоимость услуги',
                            'SCHEMA',
                            N'CONF',
                            'TABLE',
                            N'Service',
                            'COLUMN',
                            N'Price'
go

grant select, update, insert, delete on CONF.Service to AppUser
go

create table CRM.STF.StaffService (
    StaffID int not null,
    ServiceID int not null,
    constraint PK#StaffService primary key (StaffID, ServiceID),
    constraint FK#StaffService@ServiceID#Service@ID foreign key (ServiceID) references CONF.Service (ID),
    constraint FK#StaffService@StaffID#Staff@ID foreign key (StaffID) references STF.Staff (ID) on delete cascade
) on [PRIMARY]
go

exec sp_addextendedproperty N'MS_Description',
                            N'Услуги персонала',
                            'SCHEMA',
                            N'STF',
                            'TABLE',
                            N'StaffService'
go

exec sp_addextendedproperty N'MS_Description',
                            N'ИД отрудника',
                            'SCHEMA',
                            N'STF',
                            'TABLE',
                            N'StaffService',
                            'COLUMN',
                            N'StaffID'
go

exec sp_addextendedproperty N'MS_Description',
                            N'ИД услуги',
                            'SCHEMA',
                            N'STF',
                            'TABLE',
                            N'StaffService',
                            'COLUMN',
                            N'ServiceID'
go

grant select, update, insert, delete on STF.StaffService to AppUser
go

create table CRM.CST.AppointmentDetail (
    ID int identity,
    AppointmentID int not null,
    StaffID int not null,
    ServiceID int not null,
    Price decimal(13, 2) not null,
    constraint PK#AppointmentDetail primary key (ID),
    constraint FK#AppointmentDetail@AppointmentID#Appointment@ID foreign key (AppointmentID) references CST.Appointment (ID),
    constraint FK#AppointmentDetail@ServiceID#Service@ID foreign key (ServiceID) references CONF.Service (ID),
    constraint FK#AppointmentDetail@StaffID#Staff@ID foreign key (StaffID) references STF.Staff (ID)
) on [PRIMARY]
go

create index FK#AppointmentDetail@ServiceID#Service@ID
on CRM.CST.AppointmentDetail (ServiceID)
on [PRIMARY]
go

create index IFK#AppointmentDetail@AppointmentID#Appointment@ID
on CRM.CST.AppointmentDetail (AppointmentID)
on [PRIMARY]
go

create index IFK#AppointmentDetail@StaffID#Staff@ID
on CRM.CST.AppointmentDetail (StaffID)
on [PRIMARY]
go

exec sp_addextendedproperty N'MS_Description',
                            N'Деталб события',
                            'SCHEMA',
                            N'CST',
                            'TABLE',
                            N'AppointmentDetail'
go

exec sp_addextendedproperty N'MS_Description',
                            N'ИД детали события',
                            'SCHEMA',
                            N'CST',
                            'TABLE',
                            N'AppointmentDetail',
                            'COLUMN',
                            N'ID'
go

exec sp_addextendedproperty N'MS_Description',
                            N'ИД события',
                            'SCHEMA',
                            N'CST',
                            'TABLE',
                            N'AppointmentDetail',
                            'COLUMN',
                            N'AppointmentID'
go

exec sp_addextendedproperty N'MS_Description',
                            N'ИД сотрудника',
                            'SCHEMA',
                            N'CST',
                            'TABLE',
                            N'AppointmentDetail',
                            'COLUMN',
                            N'StaffID'
go

exec sp_addextendedproperty N'MS_Description',
                            N'ИД услуги',
                            'SCHEMA',
                            N'CST',
                            'TABLE',
                            N'AppointmentDetail',
                            'COLUMN',
                            N'ServiceID'
go

exec sp_addextendedproperty N'MS_Description',
                            N'Фактическая стоимость',
                            'SCHEMA',
                            N'CST',
                            'TABLE',
                            N'AppointmentDetail',
                            'COLUMN',
                            N'Price'
go

grant select, update, insert, delete on CST.AppointmentDetail to AppUser
go

alter table CST.Appointment drop constraint FK#Appointment@StaffID#Staff@ID
go
drop index I#Appointment@StaffID@StateID on CST.Appointment
go
alter table CST.Appointment drop column StaffID
go
alter table CST.Appointment drop column Purpose
go

alter VIEW CST.CustomerView (CustomerID, FirstName, LastName, MiddleName, Gender, Country, City, Region, Zip, Phone, MobilePhone, Email, Address, BirthDate, MoneyBalance, NotifyByEmail, NotifyBySms, NotifyByPost, CreationTime, ModificationTime, DiscountcardID, DiscountCardCode, DiscountPercent, FirstVisit, LastVisit, NextVisit)
AS
    select  c.ID as CustomerID,
        c.FirstName,
        c.LastName,
        c.MiddleName,
        c.Gender,
        c.Country,
        c.City,
        c.Region,
        c.Zip,
        c.Phone,
        c.MobilePhone,
        c.Email,
        c.Address,
        c.BirthDate,
        c.MoneyBalance,
        c.NotifyByEmail,
        c.NotifyBySms,
        c.NotifyByPost,
        c.CreationTime,
        c.ModificationTime,
        dc.ID as DiscountcardID,
        dc.Code as DiscountCardCode,
        dc.DiscountPercent,
        (select min(a.StartTime)
           from CST.Appointment a
          where a.CustomerID = c.ID
            and a.StateID != 3 /* Completed */) as FirstVisit,
        (select max(a.StartTime)
           from CST.Appointment a
          where a.CustomerID = c.ID
            and a.StartTime &lt; getdate()
            and a.StateID = 3 /* Completed */) as LastVisit,
        (select max(a.StartTime)
           from CST.Appointment a
          where a.CustomerID = c.ID
            and a.StartTime &gt; getdate()
            and a.StateID not in (3, 4) /* Canceled, Completed */) as NextVisit
  from CST.Customer c
       left outer join CST.DiscountCard dc
    on c.DiscountCardID = dc.ID
 where 1 =1
GO

alter VIEW CST.AppointmentView (AppointmentID, CustomerID, CustomerFirstName, CustomerLastName, CustomerMiddleName, DiscountCardCode, DiscountCardPercent, DiscountCardTotalPurchaseValue, DiscountCardMinDiscount, DiscountCardMaxDiscount, StartTime, EndTime, Price, AppointementDetails, DiscountPercent, Discount, ToPay, Payed, StateID, CreationTime, CreatedBy, ModificationTime, ModifiedBy)
AS
 select a.ID as AppointmentID,
        a.CustomerID,
        c.FirstName as CustomerFirstName,
        c.LastName as CustomerLastName,
        c.MiddleName as CustomerMiddleName,
        dc.Code as DiscountCardCode,
        dc.DiscountPercent as DiscountCardPercent,
        dc.TotalPurchaseValue as DiscountCardTotalPurchaseValue,
        dc.MinDiscount as DiscountCardMinDiscount,
        dc.MaxDiscount as DiscountCardMaxDiscount,
        a.StartTime,
        a.EndTime,
        a.Price,
        stuff((select char(10) + s.[Description] + N' - ' 
                         + cast(ad.Price as nvarchar) + N'руб. /'
                         + st.LastName + N' ' + left(st.FirstName, 1) + N'.' + case when st.MiddleName is not null
                                                                                    then left(st.MiddleName, 1) + N'.'
                                                                                    else N''
                                                                               end + N'/'
                 from CST.AppointmentDetail ad
                      inner join CONF.Service s 
                   on ad.ServiceID = s.ID
                      inner join STF.Staff st
                   on ad.StaffID = st.ID
                where ad.AppointmentID = a.ID
                order by ad.ID
                  for xml path('')
              ),1,1,'') as AppointementDetails,
        a.DiscountPercent,
        a.Discount,
        a.ToPay,
        cast(isnull((select sum(ft.Amount)
                       from CST.FinancialTransaction ft
                            inner join CONF.TransactionType tt 
                         on ft.TransactionTypeID = tt.ID
                      where ft.AppointmentID = a.ID
                        and tt.OperationSign = 1), 0) as decimal(13,2)) as Payed,
        a.StateID,
        a.CreationTime,
        a.CreatedBy,
        a.ModificationTime,
        a.ModifiedBy
   from CST.Appointment a
        inner join CST.Customer c
     on a.CustomerID = c.ID
        left outer join CST.DiscountCard dc
     on c.DiscountCardID = dc.ID
  where 1 = 1
GO

alter VIEW CST.FinancialTransactionView (ID, CustomerID, CustomerFirstName, CustomerLastName, CustomerMiddleName, DiscountCardCode, DiscountCardPercent, DiscountCardTotalPurchaseValue, DiscountCardMinDiscount, DiscountCardMaxDiscount, AppointmentID, AppointmentStartTime, AppointmentEndTime, Price, ToPay, DiscountPercent, Discount, TransactionTypeID, Amount, Comment, CreationTime, CreatedBy, ModificationTime, ModifiedBy, IsCanceled)
AS
 select  ft.ID,
         ft.CustomerID,
         c.FirstName as CustomerFirstName,
         c.LastName as CustomerLastName,
         c.MiddleName as CustomerMiddleName,
         dc.Code as DiscountCardCode,
         dc.DiscountPercent as DiscountCardPercent,
         dc.TotalPurchaseValue as DiscountCardTotalPurchaseValue,
         dc.MinDiscount as DiscountCardMinDiscount,
         dc.MaxDiscount as DiscountCardMaxDiscount,
         ft.AppointmentID,
         a.StartTime as AppointmentStartTime,
         a.EndTime as AppointmentEndTime,
         a.Price,
         a.ToPay,
         a.DiscountPercent,
         a.Discount,
         ft.TransactionTypeID,
         ft.Amount,
         ft.Comment,
         ft.CreationTime,
         ft.CreatedBy,
         ft.ModificationTime,
         ft.ModifiedBy,
         ft.IsCanceled
   from CST.FinancialTransaction ft
        inner join CST.Appointment a
     on ft.AppointmentID = a.ID
        inner join CST.Customer c
     on ft.CustomerID = c.ID
        left outer join CST.DiscountCard dc
     on c.DiscountCardID = dc.ID   
  where 1 = 1
GO

alter VIEW CST.CustomerView (CustomerID, FirstName, LastName, MiddleName, Gender, Country, City, Region, Zip, Phone, MobilePhone, Email, Address, BirthDate, MoneyBalance, NotifyByEmail, NotifyBySms, NotifyByPost, CreationTime, ModificationTime, DiscountcardID, DiscountCardCode, DiscountPercent, FirstVisit, LastVisit, NextVisit)
AS
    select  c.ID as CustomerID,
        c.FirstName,
        c.LastName,
        c.MiddleName,
        c.Gender,
        c.Country,
        c.City,
        c.Region,
        c.Zip,
        c.Phone,
        c.MobilePhone,
        c.Email,
        c.Address,
        c.BirthDate,
        c.MoneyBalance,
        c.NotifyByEmail,
        c.NotifyBySms,
        c.NotifyByPost,
        c.CreationTime,
        c.ModificationTime,
        dc.ID as DiscountcardID,
        dc.Code as DiscountCardCode,
        dc.DiscountPercent,
        (select min(a.StartTime)
           from CST.Appointment a
          where a.CustomerID = c.ID
            and a.StateID = 4 /* Completed */) as FirstVisit,
        (select max(a.StartTime)
           from CST.Appointment a
          where a.CustomerID = c.ID
            and a.StartTime &lt; getdate()
            and a.StateID = 4 /* Completed */) as LastVisit,
        (select max(a.StartTime)
           from CST.Appointment a
          where a.CustomerID = c.ID
            and a.StartTime &gt; getdate()
            and a.StateID not in (3, 4) /* Canceled, Completed */) as NextVisit
  from CST.Customer c
       left outer join CST.DiscountCard dc
    on c.DiscountCardID = dc.ID
 where 1 =1
GO


PRINT N'Update complete.';</value>
  </data>
  <data name="v_1_2_0_10" xml:space="preserve">
    <value>use CRM
go

alter TRIGGER CST.TIUD#FinancialTransaction
    on CST.FinancialTransaction
    after insert, update, delete as
begin

    with affectedCustomers 
      as (select distinct CustomerID 
           from INSERTED
          where 1 = 1
         union
         select distinct CustomerID 
           from DELETED
          where 1 = 1),
        balanceChanges
      as (select ft.CustomerID, 
                 sum(tt.OperationSign 
                     * case when ft.IsCanceled = 1
                            then 0
                            else ft.Amount
                       end) as Balance
            from CST.FinancialTransaction ft
                 inner join affectedCustomers i
              on ft.CustomerID = i.CustomerID
                 inner join CONF.TransactionType tt
              on tt.ID = ft.TransactionTypeID
           where 1 = 1
           group by ft.CustomerID)
    update c
       set c.MoneyBalance = isnull(b.Balance, 0)
      from CST.Customer c
           inner join affectedCustomers ac
        on (c.ID = ac.CustomerID)
           left outer join balanceChanges b
        on ac.CustomerID = b.CustomerID
     where 1 = 1;
end
GO

alter PROCEDURE CST.CreateFinancialTransaction
    @userID int,
    @transactionTypeID int,
    @customerID int,
    @appointmentID int,
    @amount decimal(13, 2),
    @comment nvarchar(4000)
AS 
begin
    declare @id int,
            @discountCardID int,
            @discountType int,
            @totalPurchaseValue decimal(13, 2),
            @now datetime,
            @message nvarchar(4000),
            @isFixedDiscount bit;
    set @now = getdate();
    begin transaction;
    begin try
        insert into CST.FinancialTransaction 
            (CustomerID, AppointmentID, TransactionTypeID, Amount, Comment, CreationTIme, CreatedBy)
        values 
            (@customerID, @appointmentID, @transactionTypeID, @amount, @comment, getdate(), @userID);
        set @id = scope_identity();
        if(exists(select 1 /* РѕРїРµСЂР°С†РёСЏ СѓРІРµР»РёС‡РёРІР°РµС‚ Р±Р°Р»Р°РЅСЃ */
                    from CONF.TransactionType tt
                   where tt.OperationSign = 1
                     and tt.ID = @transactionTypeID)
           and exists(select 1 /* РєР»РёРµРЅС‚ РёРјРµРµС‚ РґРёСЃРєРѕРЅС‚РЅСѓСЋ РєР°СЂС‚Сѓ */
                        from CST.DiscountCard dc 
                             inner join CST.Customer c 
                          on dc.ID = c.DiscountCardID
                       where c.ID = @customerID))
        begin
            select @discountCardID = dc.ID,
                   @discountType = dc.DiscountTypeID,
                   @isFixedDiscount = dc.FixedDiscount
              from CST.DiscountCard dc 
                   inner join CST.Customer c 
                on dc.ID = c.DiscountCardID
             where c.ID = @customerID;

                select @totalPurchaseValue = sum(ft.Amount)
                  from CST.Customer c
                       inner join CST.FinancialTransaction ft
                    on ft.CustomerID = c.ID
                       inner join CONF.TransactionType tt 
                    on (ft.TransactionTypeID = tt.ID
                        and tt.OperationSign = 1) 
                 where c.DiscountCardID = @discountCardID;

                update CST.DiscountCard
                   set TotalPurchaseValue = isnull(@totalPurchaseValue, 0)
                 where ID = @discountCardID;

            if(@isFixedDiscount = 0 
               and @discountType = 1 /* РЅР°РєРѕРїРёС‚РµР»СЊРЅР°СЏ СЃРєРёРґРєР° */)
            begin
                declare @cumulativeDiscountID int;
                set @cumulativeDiscountID = CONF.GetCumulativeDiscountID(@discountCardID);
                
                update dc
                   set dc.DiscountPercent = isnull(cd.[Percent], dc.DiscountPercent),
                       dc.MinDiscount = isnull(cd.MinDiscount, dc.MinDiscount),
                       dc.MaxDiscount = isnull(cd.MaxDiscount, dc.MaxDiscount)
                  from CST.DiscountCard dc
                       left outer join CONF.CumulativeDiscount cd
                    on (@cumulativeDiscountID is not null 
                        and cd.ID = @cumulativeDiscountID)
                 where dc.ID = @discountCardID;                
            end;
        end;

        declare @apointmentStateID int,
                @appointmentToPay decimal(13,2),
                @payed decimal(13,2);
        select @apointmentStateID = a.StateID,
               @appointmentToPay = a.ToPay
          from CST.Appointment a
         where a.ID = @appointmentID;

        set @payed = isnull((select sum(ft.Amount)
                               from CST.FinancialTransaction ft
                              where ft.AppointmentID = @appointmentID
                                and ft.TransactionTypeID = 1
                                and ft.IsCanceled = 0), 0);
        
        if(@apointmentStateID = 3 /* canceled */)
        begin
            return;
        end        
        else
        begin
            update CST.Appointment
               set StateID = case when @appointmentToPay &gt; @payed
                                  then 2
                                  else 4
                             end
             where ID = @appointmentID;
        end;

        commit;
    end try
    begin catch
        set @message = error_message();
        rollback;
        raiserror(@message, 16, 1);
    end catch;
    
    select  ft.ID,
            ft.CustomerID,
            ft.AppointmentID,
            ft.TransactionTypeID,
            ft.Amount,
            ft.Comment,
            ft.CreationTime,
            ft.CreatedBy,
            ft.ModificationTime,
            ft.ModifiedBy
      from CST.FinancialTransaction ft 
     where ft.ID = @id;
end
GO

alter PROCEDURE CST.DeleteFinancialTransaction
    @id int
AS 
begin
    begin transaction;
    begin try
        declare @transactionTypeID int,
                @customerID int,
                @message nvarchar(4000),
                @appointmentID int;
        
        select @transactionTypeID = ft.TransactionTypeID,
               @customerID = ft.CustomerID,
               @appointmentID = ft.AppointmentID
          from CST.FinancialTransaction ft
         where ID = @id;

        delete from CST.FinancialTransaction 
         where ID = @id
            
        if(exists(select 1 /* РѕРїРµСЂР°С†РёСЏ СѓРІРµР»РёС‡РёРІР°РµС‚ Р±Р°Р»Р°РЅСЃ */
                    from CONF.TransactionType tt
                   where tt.OperationSign = 1
                     and tt.ID = @transactionTypeID)
           and exists(select 1 /* РєР»РёРµРЅС‚ РёРјРµРµС‚ РґРёСЃРєРѕРЅС‚РЅСѓСЋ РєР°СЂС‚Сѓ */
                        from CST.DiscountCard dc 
                             inner join CST.Customer c 
                          on dc.ID = c.DiscountCardID
                       where c.ID = @customerID))
        begin
            declare @discountCardID int,
                    @discountType int,
                    @totalPurchaseValue decimal(13,2),
                    @isFixedDiscount bit;

            select @discountCardID = dc.ID,
                   @discountType = dc.DiscountTypeID,
                   @isFixedDiscount = dc.FixedDiscount
              from CST.DiscountCard dc 
                   inner join CST.Customer c 
                on dc.ID = c.DiscountCardID
             where c.ID = @customerID;

            select @totalPurchaseValue = sum(ft.Amount)
              from CST.Customer c
                   inner join CST.FinancialTransaction ft
                on ft.CustomerID = c.ID
                   inner join CONF.TransactionType tt 
                on (ft.TransactionTypeID = tt.ID
                    and tt.OperationSign = 1) 
             where c.DiscountCardID = @discountCardID;

            update CST.DiscountCard
               set TotalPurchaseValue = isnull(@totalPurchaseValue, 0)
             where ID = @discountCardID;

            if(@isFixedDiscount = 0 
               and @discountType = 1 /* РЅР°РєРѕРїРёС‚РµР»СЊРЅР°СЏ СЃРєРёРґРєР° */)
            begin
                declare @cumulativeDiscountID int;
                set @cumulativeDiscountID = CONF.GetCumulativeDiscountID(@discountCardID);
                
                update dc
                   set dc.DiscountPercent = isnull(cd.[Percent], dc.DiscountPercent),
                       dc.MinDiscount = isnull(cd.MinDiscount, dc.MinDiscount),
                       dc.MaxDiscount = isnull(cd.MaxDiscount, dc.MaxDiscount)
                  from CST.DiscountCard dc
                       left outer join CONF.CumulativeDiscount cd
                    on (@cumulativeDiscountID is not null 
                        and cd.ID = @cumulativeDiscountID)
                 where dc.ID = @discountCardID;                
            end;
        end;

        declare @apointmentStateID int,
                @appointmentToPay decimal(13,2),
                @payed decimal(13,2);
        select @apointmentStateID = a.StateID,
               @appointmentToPay = a.ToPay
          from CST.Appointment a
         where a.ID = @appointmentID;

        set @payed = isnull((select sum(ft.Amount)
                               from CST.FinancialTransaction ft
                              where ft.AppointmentID = @appointmentID
                                and ft.TransactionTypeID = 1
                                and ft.IsCanceled = 0), 0);
        
        if(@apointmentStateID = 3 /* canceled */)
        begin
            return;
        end        
        else
        begin
            update CST.Appointment
               set StateID = case when @appointmentToPay &gt; @payed
                                  then 2
                                  else 4
                             end
             where ID = @appointmentID;
        end;

        commit;
    end try
    begin catch
        set @message = error_message();
        raiserror(@message, 16, 1);
        rollback;
    end catch;
end
GO

alter PROCEDURE CST.RecalculateDiscount
    @discountCardID int
AS 
begin
    begin transaction;
    begin try
        declare @customerID int,
                @discountType int,
                @totalPurchaseValue decimal(13,2),
                @isFixedDiscount bit;

        select @discountType = dc.DiscountTypeID,
               @isFixedDiscount = dc.FixedDiscount,
               @customerID = c.ID
          from CST.DiscountCard dc 
               inner join CST.Customer c 
            on dc.ID = c.DiscountCardID
         where dc.ID = @discountCardID;

        select @totalPurchaseValue = sum(ft.Amount)
          from CST.Customer c
               inner join CST.FinancialTransaction ft
            on ft.CustomerID = c.ID
               inner join CONF.TransactionType tt 
            on (ft.TransactionTypeID = tt.ID
                and tt.OperationSign = 1) 
         where c.DiscountCardID = @discountCardID;

        update CST.DiscountCard
           set TotalPurchaseValue = isnull(@totalPurchaseValue, 0)
         where ID = @discountCardID;

        if(@isFixedDiscount = 0 
           and @discountType = 1 /* РЅР°РєРѕРїРёС‚РµР»СЊРЅР°СЏ СЃРєРёРґРєР° */)
        begin
            declare @cumulativeDiscountID int;
            set @cumulativeDiscountID = CONF.GetCumulativeDiscountID(@discountCardID);
            
            update dc
               set dc.DiscountPercent = isnull(cd.[Percent], dc.DiscountPercent),
                   dc.MinDiscount = isnull(cd.MinDiscount, dc.MinDiscount),
                   dc.MaxDiscount = isnull(cd.MaxDiscount, dc.MaxDiscount)
              from CST.DiscountCard dc
                   left outer join CONF.CumulativeDiscount cd
                on (@cumulativeDiscountID is not null 
                    and cd.ID = @cumulativeDiscountID)
             where dc.ID = @discountCardID;                
        end;
        commit;
    end try
    begin catch
        declare @message nvarchar(max) = error_message();
        rollback;
        raiserror(@message, 16, 1);
    end catch;

    
    select dc.ID,
           dc.Code,
           dc.DiscountPercent,
           dc.TotalPurchaseValue,
           dc.DiscountTypeID,
           dc.MinDiscount,
           dc.MaxDiscount,
           dc.FixedDiscount,
           dc.InitialDiscountPercent
      from CST.DiscountCard dc
     where dc.ID = @discountCardID;
end
GO

alter PROCEDURE CST.UpdateFinancialTransaction
    @id int,
    @userID int,
    @transactionTypeID int,
    @customerID int,
    @appointmentID int,
    @amount decimal(13, 2),
    @comment nvarchar(4000)
AS 
begin
    begin transaction;
    begin try
        declare @message nvarchar(4000);
        
        select @transactionTypeID = ft.TransactionTypeID,
               @customerID = ft.CustomerID
          from CST.FinancialTransaction ft
         where ID = @id;

        update CST.FinancialTransaction 
           set CustomerID = @customerID,
               TransactionTypeID = @transactionTypeID,
               AppointmentID = @appointmentID,
               Amount = @amount,
               Comment = @comment,
               ModifiedBy = @userID,
               ModificationTime = getdate() 
         where ID = @id;
            
        if(exists(select 1 /* РѕРїРµСЂР°С†РёСЏ СѓРІРµР»РёС‡РёРІР°РµС‚ Р±Р°Р»Р°РЅСЃ */
                    from CONF.TransactionType tt
                   where tt.OperationSign = 1
                     and tt.ID = @transactionTypeID)
           and exists(select 1 /* РєР»РёРµРЅС‚ РёРјРµРµС‚ РґРёСЃРєРѕРЅС‚РЅСѓСЋ РєР°СЂС‚Сѓ */
                        from CST.DiscountCard dc 
                             inner join CST.Customer c 
                          on dc.ID = c.DiscountCardID
                       where c.ID = @customerID))
        begin
            declare @discountCardID int,
                    @discountType int,
                    @totalPurchaseValue decimal(13,2),
                    @isFixedDiscount bit;

            select @discountCardID = dc.ID,
                   @discountType = dc.DiscountTypeID,
                   @isFixedDiscount = dc.FixedDiscount
              from CST.DiscountCard dc 
                   inner join CST.Customer c 
                on dc.ID = c.DiscountCardID
             where c.ID = @customerID;

            select @totalPurchaseValue = sum(ft.Amount)
              from CST.Customer c
                   inner join CST.FinancialTransaction ft
                on ft.CustomerID = c.ID
                   inner join CONF.TransactionType tt 
                on (ft.TransactionTypeID = tt.ID
                    and tt.OperationSign = 1) 
             where c.DiscountCardID = @discountCardID;

            update CST.DiscountCard
               set TotalPurchaseValue = isnull(@totalPurchaseValue, 0)
             where ID = @discountCardID;

            if(@isFixedDiscount = 0 
               and @discountType = 1 /* РЅР°РєРѕРїРёС‚РµР»СЊРЅР°СЏ СЃРєРёРґРєР° */)
            begin
                declare @cumulativeDiscountID int;
                set @cumulativeDiscountID = CONF.GetCumulativeDiscountID(@discountCardID);
                
                update dc
                   set dc.DiscountPercent = isnull(cd.[Percent], dc.DiscountPercent),
                       dc.MinDiscount = isnull(cd.MinDiscount, dc.MinDiscount),
                       dc.MaxDiscount = isnull(cd.MaxDiscount, dc.MaxDiscount)
                  from CST.DiscountCard dc
                       left outer join CONF.CumulativeDiscount cd
                    on (@cumulativeDiscountID is not null 
                        and cd.ID = @cumulativeDiscountID)
                 where dc.ID = @discountCardID;                
            end;
        end;

        declare @apointmentStateID int,
                @appointmentToPay decimal(13,2),
                @payed decimal(13,2);
        select @apointmentStateID = a.StateID,
               @appointmentToPay = a.ToPay
          from CST.Appointment a
         where a.ID = @appointmentID;

        set @payed = isnull((select sum(ft.Amount)
                               from CST.FinancialTransaction ft
                              where ft.AppointmentID = @appointmentID
                                and ft.TransactionTypeID = 1
                                and ft.IsCanceled = 0), 0);
        
        if(@apointmentStateID = 3 /* canceled */)
        begin
            return;
        end        
        else
        begin
            update CST.Appointment
               set StateID = case when @appointmentToPay &gt; @payed
                                  then 2
                                  else 4
                             end
             where ID = @appointmentID;
        end;


        commit;
    end try
    begin catch
        set @message = error_message();
        rollback;
        raiserror(@message, 16, 1);
    end catch;

    select  ft.ID,
            ft.CustomerID,
            ft.AppointmentID,
            ft.TransactionTypeID,
            ft.Amount,
            ft.Comment,
            ft.CreationTime,
            ft.CreatedBy,
            ft.ModificationTime,
            ft.ModifiedBy 
      from CST.FinancialTransaction ft
     where ft.ID = @id;
end
GO

alter FUNCTION CONF.GetCumulativeDiscountID(@discountCardID int)
returns int
begin
    declare @result int,
            @initialDiscount decimal(4,2),
            @newDiscount decimal(4, 2);

    select @initialDiscount = dc.InitialDiscountPercent
      from CST.DiscountCard dc
     where dc.ID = @discountCardID;


    with discounts
        as (select cd.ID,
                   cd.PurchaseTopLimit, 
                   cd.[Percent],
                   row_number() over (order by cd.PurchaseTopLimit) RowNumber
              from (select ID,
                           PurchaseTopLimit,
                           [Percent] 
                      from CONF.CumulativeDiscount
                    union all
                    select top 1
                           ID,
                           99999999999999,
                           1
                      from CONF.CumulativeDiscount
                     where PurchaseTopLimit = (select max(PurchaseTopLimit)
                                                 from CONF.CumulativeDiscount)) cd
             where 1 = 1),
         discountQuant 
        as (select d1.ID, 
                   isnull(d2.PurchaseTopLimit, 0) as PurchaseTopLimitFrom,
                   d1.PurchaseTopLimit as PurchaseTopLimitTo,
                   d1.[Percent]
              from discounts d1
                   left outer join discounts d2
                on d2.RowNumber = d1.RowNumber - 1
             where 1 = 1)
    select top 1 
           @result = dq.ID,
           @newDiscount = dq.[Percent]
      from CST.DiscountCard dc
           inner join discountQuant dq
        on (dc.TotalPurchaseValue &gt;= dq.PurchaseTopLimitFrom
            and dc.TotalPurchaseValue &lt; dq.PurchaseTopLimitTo)
     where dc.ID = @discountCardID
     order by dq.PurchaseTopLimitTo desc
     
    if(@newDiscount &lt; @initialDiscount)
    begin
        select top 1
               @result = cd.ID
          from CONF.CumulativeDiscount cd
         where cd.[Percent] &gt;= @initialDiscount
         order by cd.[Percent] asc;
    end;

    return @result;
end;
GO

PRINT N'Update complete.';</value>
  </data>
  <data name="v_1_2_0_11" xml:space="preserve">
    <value>print 'No DB updates'</value>
  </data>
  <data name="v_1_2_0_4" xml:space="preserve">
    <value>use CRM
go

alter TRIGGER [CST].[TIUD#FinancialTransaction]
    on CST.FinancialTransaction
    after insert, update, delete as
begin

    with affectedCustomers 
      as (select distinct CustomerID 
           from INSERTED
          where 1 = 1
         union
         select distinct CustomerID 
           from DELETED
          where 1 = 1),
        balanceChanges
      as (select ft.CustomerID, 
                 sum(tt.OperationSign 
                     * case when ft.IsCanceled = 1
                            then 0
                            else ft.Amount
                       end) as Balance
            from CST.FinancialTransaction ft
                 inner join affectedCustomers i
              on ft.CustomerID = i.CustomerID
                 inner join CONF.TransactionType tt
              on tt.ID = ft.TransactionTypeID
           where 1 = 1
           group by ft.CustomerID)
    update c
       set c.MoneyBalance = isnull(b.Balance, 0)
      from CST.Customer c
           inner join affectedCustomers ac
        on (c.ID = ac.CustomerID)
           left outer join balanceChanges b
        on ac.CustomerID = b.CustomerID
     where 1 = 1;
   
    if(exists(select 1
                from DELETED d
                     inner join CST.Appointment a
                  on d.AppointmentID = a.ID
               where a.ToPay &gt; isnull((select sum(ft.Amount)
                                         from CST.FinancialTransaction ft
                                        where ft.AppointmentID = d.AppointmentID
                                          and ft.TransactionTypeID = 1
                                          and ft.IsCanceled = 0), 0)))
    begin
        update a
           set a.StateID = 2
          from CST.Appointment a
               inner join DELETED d
            on a.ID = d.AppointmentID
         where 1 = 1;
    end;

end
GO

alter	 PROCEDURE CST.DeleteFinancialTransaction
    @id int
AS 
begin
    begin transaction;
    begin try
        declare @transactionTypeID int,
                @customerID int,
                @message nvarchar(4000);
        
        select @transactionTypeID = ft.TransactionTypeID,
               @customerID = ft.CustomerID
          from CST.FinancialTransaction ft
         where ID = @id;

        delete from CST.FinancialTransaction 
         where ID = @id
            
        if(exists(select 1 /* РѕРїРµСЂР°С†РёСЏ СѓРІРµР»РёС‡РёРІР°РµС‚ Р±Р°Р»Р°РЅСЃ */
                    from CONF.TransactionType tt
                   where tt.OperationSign = 1
                     and tt.ID = @transactionTypeID)
           and exists(select 1 /* РєР»РёРµРЅС‚ РёРјРµРµС‚ РґРёСЃРєРѕРЅС‚РЅСѓСЋ РєР°СЂС‚Сѓ */
                        from CST.DiscountCard dc 
                             inner join CST.Customer c 
                          on dc.ID = c.DiscountCardID
                       where c.ID = @customerID))
        begin
            declare @discountCardID int,
                    @discountType int,
                    @totalPurchaseValue decimal(13,2),
                    @isFixedDiscount bit;

            select @discountCardID = dc.ID,
                   @discountType = dc.DiscountTypeID,
                   @isFixedDiscount = dc.FixedDiscount
              from CST.DiscountCard dc 
                   inner join CST.Customer c 
                on dc.ID = c.DiscountCardID
             where c.ID = @customerID;

            select @totalPurchaseValue = sum(ft.Amount)
              from CST.Customer c
                   inner join CST.FinancialTransaction ft
                on ft.CustomerID = c.ID
                   inner join CONF.TransactionType tt 
                on (ft.TransactionTypeID = tt.ID
                    and tt.OperationSign = 1) 
             where c.DiscountCardID = @discountCardID;

            update CST.DiscountCard
               set TotalPurchaseValue = isnull(@totalPurchaseValue, 0)
             where ID = @discountCardID;

            if(@isFixedDiscount = 0 
               and @discountType = 1 /* РЅР°РєРѕРїРёС‚РµР»СЊРЅР°СЏ СЃРєРёРґРєР° */)
            begin
                declare @cumulativeDiscountID int;
                set @cumulativeDiscountID = CONF.GetCumulativeDiscountID(@discountCardID);
                
                update dc
                   set dc.DiscountPercent = isnull(cd.[Percent], dc.DiscountPercent),
                       dc.MinDiscount = isnull(cd.MinDiscount, dc.MinDiscount),
                       dc.MaxDiscount = isnull(cd.MaxDiscount, dc.MaxDiscount)
                  from CST.DiscountCard dc
                       left outer join CONF.CumulativeDiscount cd
                    on (@cumulativeDiscountID is not null 
                        and cd.ID = @cumulativeDiscountID)
                 where dc.ID = @discountCardID;                
            end;
        end;
        commit;
    end try
    begin catch
        set @message = error_message();
        raiserror(@message, 16, 1);
        rollback;
    end catch;
end
GO
PRINT N'Update complete.';</value>
  </data>
  <data name="v_1_2_0_5" xml:space="preserve">
    <value>use CRM
go

alter FUNCTION CONF.GetCumulativeDiscountID(@discountCardID int)
returns int
begin
    declare @result int,
            @initialDiscount decimal(4,2),
            @newDiscount decimal(4, 2);

    select @initialDiscount = dc.InitialDiscountPercent
      from CST.DiscountCard dc
     where dc.ID = @discountCardID;


    with discounts
        as (select cd.ID,
                   cd.PurchaseTopLimit, 
                   cd.[Percent],
                   row_number() over (order by cd.PurchaseTopLimit) RowNumber
              from (select ID,
                           PurchaseTopLimit,
                           [Percent] 
                      from CONF.CumulativeDiscount
                    union all
                    select top 1
                           ID,
                           99999999999999,
                           1
                      from CONF.CumulativeDiscount
                     where PurchaseTopLimit = (select max(PurchaseTopLimit)
                                                 from CONF.CumulativeDiscount)) cd
             where 1 = 1),
         discountQuant 
        as (select d1.ID, 
                   isnull(d2.PurchaseTopLimit, 0) as PurchaseTopLimitFrom,
                   d1.PurchaseTopLimit as PurchaseTopLimitTo,
                   d2.[Percent]
              from discounts d1
                   left outer join discounts d2
                on d2.RowNumber = d1.RowNumber - 1
             where 1 = 1)
    select top 1 
           @result = dq.ID,
           @newDiscount = dq.[Percent]
      from CST.DiscountCard dc
           inner join discountQuant dq
        on (dc.TotalPurchaseValue &gt;= dq.PurchaseTopLimitFrom
            and dc.TotalPurchaseValue &lt; dq.PurchaseTopLimitTo)
     where dc.ID = @discountCardID
     order by dq.PurchaseTopLimitTo desc
    
    if(@newDiscount &lt; @initialDiscount)
    begin
        select top 1
               @result = cd.ID
          from CONF.CumulativeDiscount cd
         where cd.[Percent] &gt;= @initialDiscount
         order by cd.[Percent] asc;
    end;

    return @result;
end;
GO

PRINT N'Update complete.';</value>
  </data>
  <data name="v_1_2_0_7" xml:space="preserve">
    <value>use CRM
go

alter FUNCTION CONF.GetCumulativeDiscountID(@discountCardID int)
returns int
begin
    declare @result int,
            @initialDiscount decimal(4,2),
            @newDiscount decimal(4, 2);

    select @initialDiscount = dc.InitialDiscountPercent
      from CST.DiscountCard dc
     where dc.ID = @discountCardID;


    with discounts
        as (select cd.ID,
                   cd.PurchaseTopLimit, 
                   cd.[Percent],
                   row_number() over (order by cd.PurchaseTopLimit) RowNumber
              from (select ID,
                           PurchaseTopLimit,
                           [Percent] 
                      from CONF.CumulativeDiscount
                    union all
                    select top 1
                           ID,
                           99999999999999,
                           1
                      from CONF.CumulativeDiscount
                     where PurchaseTopLimit = (select max(PurchaseTopLimit)
                                                 from CONF.CumulativeDiscount)) cd
             where 1 = 1),
         discountQuant 
        as (select d1.ID, 
                   isnull(d2.PurchaseTopLimit, 0) as PurchaseTopLimitFrom,
                   d1.PurchaseTopLimit as PurchaseTopLimitTo,
                   d2.[Percent]
              from discounts d1
                   left outer join discounts d2
                on d2.RowNumber = d1.RowNumber - 1
             where 1 = 1)
    select top 1 
           @result = dq.ID,
           @newDiscount = dq.[Percent]
      from CST.DiscountCard dc
           inner join discountQuant dq
        on (dc.TotalPurchaseValue &gt;= dq.PurchaseTopLimitFrom
            and dc.TotalPurchaseValue &lt; dq.PurchaseTopLimitTo)
     where dc.ID = @discountCardID
     order by dq.PurchaseTopLimitTo desc
    
    if(@newDiscount &lt; @initialDiscount)
    begin
        select top 1
               @result = cd.ID
          from CONF.CumulativeDiscount cd
         where cd.[Percent] &gt;= @initialDiscount
         order by cd.[Percent] asc;
    end;

    return @result;
end;
GO

PRINT N'Update complete.';</value>
  </data>
</root>